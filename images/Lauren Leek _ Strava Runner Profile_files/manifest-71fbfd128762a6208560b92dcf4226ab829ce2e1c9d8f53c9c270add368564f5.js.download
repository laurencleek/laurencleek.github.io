(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.AthleteStatsView = (function(superClass) {
    extend(AthleteStatsView, superClass);

    AthleteStatsView.prototype.el = '#athlete-stats';

    function AthleteStatsView(challengeController) {
      AthleteStatsView.__super__.constructor.call(this);
      if (!this.templateExists('#athlete-stats-template')) {
        return;
      }
      this.challengeController = challengeController;
      this.create_template('#athlete-stats-template');
      this.challengeController.one('ready', this.render, this);
    }

    AthleteStatsView.prototype.templateExists = function(selector) {
      var $t;
      $t = this.$$(selector);
      return $t[0];
    };

    AthleteStatsView.prototype.render = function() {
      var data;
      data = this.challengeController.getMetaData();
      if (data.current_athlete == null) {
        return this;
      }
      data.current_athlete.rank_display = data.current_athlete.rank;
      if (!data.current_athlete.rank) {
        data.current_athlete.rank_display = '&#8212;';
      }
      data.current_athlete.activity_total = this.challengeController.convertor.convertDataFormatted(data.current_athlete.activity_total_raw);
      data.progress = this.challengeController.convertor.getPercentageFormatted(data.current_athlete.activity_total_raw);
      this.$el.html(this.template({
        data: data.current_athlete
      }));
      this.handleProgress(data).handleDays(data);
      this.$el.show();
      return this;
    };

    AthleteStatsView.prototype.handleProgress = function(data) {
      var bar, barText, duration, percentage, percentage_modified;
      percentage = data.progress;
      bar = jQuery('.sidebar .progress-bar .current-progress');
      barText = jQuery('.sidebar .progress-text');
      percentage_modified = Math.min(percentage, 100);
      duration = Math.max(percentage_modified * 50, 1000);
      if (percentage === 0) {
        barText.html('0%');
      } else {
        bar.animate({
          width: percentage_modified + '%'
        }, {
          step: function(now, fx) {
            var stepProgress;
            stepProgress = now / percentage_modified;
            return barText.html((stepProgress * percentage).toFixed(0) + '%');
          },
          duration: duration,
          complete: function() {
            if (percentage >= 100) {
              return bar.html('<span style="display: none">Completed</span>').find('span').fadeIn();
            }
          }
        });
      }
      return this;
    };

    AthleteStatsView.prototype.handleDays = function(data) {
      var days, elem;
      if (data.began) {
        days = data.days_remaining;
        elem = this.$el.find('.days_remain');
        if (days > 1) {
          elem.html(days + ' Days Left');
        } else if (days === 1) {
          elem.html(days + ' Day Left');
        } else if (days === 0) {
          elem.html('Last Day');
        }
      }
      return this;
    };

    return AthleteStatsView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.AthleteVelocityStatsView = (function(superClass) {
    extend(AthleteVelocityStatsView, superClass);

    function AthleteVelocityStatsView() {
      return AthleteVelocityStatsView.__super__.constructor.apply(this, arguments);
    }

    AthleteVelocityStatsView.prototype.render = function() {
      var athlete, data;
      data = this.challengeController.getMetaData();
      athlete = data.current_athlete;
      if (athlete == null) {
        return this;
      }
      if (this.hasCompleted(athlete)) {
        athlete.rank_display = athlete.rank;
        athlete.pace = this.getPace(athlete);
      } else {
        athlete.rank_display = '&#8212;';
        athlete.pace = '&#8212;';
        athlete.num_success = 0;
      }
      this.$el.html(this.template({
        data: athlete
      }));
      this.handleDays(data);
      this.$el.show();
      return this;
    };

    AthleteVelocityStatsView.prototype.hasCompleted = function(athlete) {
      return athlete.rank && athlete.num_success && athlete.num_success > 0;
    };

    AthleteVelocityStatsView.prototype.getPace = function(athlete) {
      var convertor, pace, velocity;
      if (!athlete.activity_data) {
        return '&#8212;';
      }
      velocity = athlete.activity_data.velocity;
      if (velocity == null) {
        return '&#8212;';
      }
      if (!(velocity > 0)) {
        return '&#8212;';
      }
      convertor = this.challengeController.convertor;
      pace = convertor.convertData(velocity);
      pace = 1 / pace;
      pace = Math.floor(pace * 10) / 10;
      pace.toFixed(5);
      return convertor.formatTime(pace);
    };

    return AthleteVelocityStatsView;

  })(Strava.Challenges.AthleteStatsView);

}).call(this);
(function() {
  Strava.module('Strava.Util');

  Strava.Util.LocalTime = (function() {
    var MS_PER_DAY;

    function LocalTime() {}

    MS_PER_DAY = 24 * 60 * 60 * 1000;

    LocalTime.daysFromNow = function(date) {
      return this.daysBetween(this.nowInUniversalTime(), date);
    };

    LocalTime.nowInUniversalTime = function(currentDate) {
      if (currentDate == null) {
        currentDate = new Date();
      }
      return currentDate.getTime() - (currentDate.getTimezoneOffset() * 60 * 1000);
    };

    LocalTime.daysBetween = function(from, to) {
      return Math.floor(to / MS_PER_DAY) - Math.floor(from / MS_PER_DAY);
    };

    return LocalTime;

  })();

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.Challenge = (function(superClass) {
    extend(Challenge, superClass);

    function Challenge() {
      return Challenge.__super__.constructor.apply(this, arguments);
    }

    Challenge.prototype.urlRoot = '/challenges/challenge';

    Challenge.prototype.fetch = function(options) {
      this.trigger('fetch');
      return Challenge.__super__.fetch.call(this, options);
    };

    Challenge.prototype.parse = function(response) {
      var shiftedDate;
      shiftedDate = Strava.Util.LocalTime.nowInUniversalTime();
      response.days_to_start = Strava.Util.LocalTime.daysBetween(shiftedDate, response.start_date);
      response.days_to_end = Strava.Util.LocalTime.daysBetween(shiftedDate, response.end_date);
      response.started = response.days_to_start <= 0;
      response.ended = response.days_to_end < 0;
      return response;
    };

    Challenge.prototype.join = function() {
      return jQuery.ajax({
        url: "/challenges/" + this.id + "/join",
        method: 'POST'
      });
    };

    return Challenge;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.Participant = (function(superClass) {
    extend(Participant, superClass);

    function Participant() {
      return Participant.__super__.constructor.apply(this, arguments);
    }

    Participant.prototype.initialize = function() {
      return this.isLeader = false;
    };

    return Participant;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.ParticipantCollection = (function(superClass) {
    extend(ParticipantCollection, superClass);

    function ParticipantCollection() {
      return ParticipantCollection.__super__.constructor.apply(this, arguments);
    }

    ParticipantCollection.prototype.model = Strava.Challenges.Participant;

    ParticipantCollection.prototype.fetch = function(options) {
      this.trigger('fetch');
      return ParticipantCollection.__super__.fetch.call(this, options);
    };

    ParticipantCollection.prototype.reset = function(leaderboard, athletes) {
      var merged_leaderboard;
      merged_leaderboard = [];
      jQuery(leaderboard).each(function() {
        return merged_leaderboard.push(jQuery.extend(true, this, athletes[this.id]));
      });
      return ParticipantCollection.__super__.reset.call(this, merged_leaderboard);
    };

    return ParticipantCollection;

  })(Backbone.Collection);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.CollectionAdapter = (function(superClass) {
    extend(CollectionAdapter, superClass);

    function CollectionAdapter(challenge_controller) {
      this.challenge_controller = challenge_controller;
      this.challenge_controller.bind('fetch', (function(_this) {
        return function() {
          return _this.trigger('fetch');
        };
      })(this));
      this.challenge_controller.bind('ready', (function(_this) {
        return function() {
          return _this.trigger('reset');
        };
      })(this));
      this.challenge_controller.bind('soft_ready', (function(_this) {
        return function(data) {
          return _this.handleSoftReset(data);
        };
      })(this));
      this.fetching = false;
      CollectionAdapter.__super__.constructor.call(this);
    }

    CollectionAdapter.prototype.handleSoftReset = function(data) {
      if (this.fetching) {
        this.fetching = false;
      } else {
        this.handleSuccess(data);
      }
      return this.trigger('reset');
    };

    CollectionAdapter.prototype.fetch = function(options) {
      this.fetching = true;
      options.filtered = true;
      options.leaderBoardType = this.challenge_controller.leaderBoardType;
      return this.challenge_controller.fetch(jQuery.extend(true, options, {
        data: {
          leaderBoardType: this.challenge_controller.leaderBoardType
        },
        success: (function(_this) {
          return function(response) {
            _this.trigger('fetchCollection');
            return _this.handleSuccess(response);
          };
        })(this)
      }));
    };

    return CollectionAdapter;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.ParticipantCollectionAdapter = (function(superClass) {
    extend(ParticipantCollectionAdapter, superClass);

    function ParticipantCollectionAdapter(challenge_controller, type, eventType, filterType) {
      ParticipantCollectionAdapter.__super__.constructor.call(this, challenge_controller);
      this.paging_type = type;
      this.event_type = eventType;
      this.filter_type = filterType;
      this.set({
        total: 0,
        page: 1,
        perPage: 100
      });
    }

    ParticipantCollectionAdapter.prototype.fetch = function(options) {
      var opts;
      opts = {
        data: {
          filterType: this.filter_type,
          filterValue: this.challenge_controller.get_filtered_leaderboard_state(this.event_type),
          paging_type: this.paging_type,
          per_page: options.data.per_page,
          page: options.data.page
        }
      };
      return ParticipantCollectionAdapter.__super__.fetch.call(this, opts);
    };

    ParticipantCollectionAdapter.prototype.handleSuccess = function(response) {
      var paging;
      paging = response[this.paging_type];
      this.set({
        total: paging.total,
        page: paging.page,
        perPage: paging.perPage
      });
      return this.trigger('reset');
    };

    return ParticipantCollectionAdapter;

  })(Strava.Challenges.CollectionAdapter);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.ChallengeController = (function(superClass) {
    extend(ChallengeController, superClass);

    ChallengeController.FOLLOW_FILTER_CHANGE = 'followFilterViewChange';

    ChallengeController.CLUB_FILTER_CHANGE = 'clubFilterViewChange';

    ChallengeController.AGE_FILTER_CHANGE = 'ageFilterViewChange';

    ChallengeController.COUNTRY_FILTER_CHANGE = 'countryFilterViewChange';

    ChallengeController.WEIGHT_FILTER_CHANGE = 'weightFilterViewChange';

    ChallengeController.OVERALL_MALE_CHANGE = 'overallMaleChange';

    ChallengeController.OVERALL_FEMALE_CHANGE = 'overallFemaleChange';

    ChallengeController.OVERALL_CHANGE = 'overallChange';

    function ChallengeController(challenge_id, convertor, filter_defaults, currentAthlete) {
      if (filter_defaults == null) {
        filter_defaults = {
          age: null,
          weight: null,
          country: null,
          club: null
        };
      }
      if (currentAthlete == null) {
        currentAthlete = currentAthlete;
      }
      if (currentAthlete.isFemale()) {
        this.filter = new Strava.Challenges.FemaleFilter();
        this.leaderBoardType = this.klazz().OVERALL_FEMALE_CHANGE;
      } else {
        this.filter = new Strava.Challenges.AllFilter();
      }
      this.challenge_id = challenge_id;
      this.convertor = convertor;
      this.url = "/challenges/" + challenge_id + "/details";
      this.athletes = {};
      this.overall = new Strava.Challenges.ParticipantCollection();
      this.overall.bind('reset', (function(_this) {
        return function() {
          return _this.dispatchEvent(_this.klazz().OVERALL_CHANGE);
        };
      })(this));
      this.overall_athlete = {
        id: null,
        rank: null,
        delta_dimension: null
      };
      this.filter_types = {};
      this.set_filtered_leaderboard_state(this.klazz().CLUB_FILTER_CHANGE, filter_defaults.club);
      this.set_filtered_leaderboard_state(this.klazz().AGE_FILTER_CHANGE, filter_defaults.age);
      this.set_filtered_leaderboard_state(this.klazz().COUNTRY_FILTER_CHANGE, filter_defaults.country);
      this.set_filtered_leaderboard_state(this.klazz().WEIGHT_FILTER_CHANGE, filter_defaults.weight);
      this.filtered_leaderboards = {};
      this.create_filtered_leaderboard(this.klazz().FOLLOW_FILTER_CHANGE);
      this.create_filtered_leaderboard(this.klazz().CLUB_FILTER_CHANGE);
      this.create_filtered_leaderboard(this.klazz().AGE_FILTER_CHANGE);
      this.create_filtered_leaderboard(this.klazz().COUNTRY_FILTER_CHANGE);
      this.create_filtered_leaderboard(this.klazz().WEIGHT_FILTER_CHANGE);
      this.overall_male = new Strava.Challenges.ParticipantCollection();
      this.overall_male.bind('reset', (function(_this) {
        return function() {
          return _this.dispatchEvent(_this.klazz().OVERALL_MALE_CHANGE);
        };
      })(this));
      this.overall_female = new Strava.Challenges.ParticipantCollection();
      this.overall_female.bind('reset', (function(_this) {
        return function() {
          return _this.dispatchEvent(_this.klazz().OVERALL_FEMALE_CHANGE);
        };
      })(this));
      ChallengeController.__super__.constructor.call(this);
    }

    ChallengeController.prototype.set_filtered_leaderboard_state = function(type, value) {
      return this.filter_types[type] = value;
    };

    ChallengeController.prototype.get_filtered_leaderboard_state = function(type) {
      return this.filter_types[type];
    };

    ChallengeController.prototype.create_filtered_leaderboard = function(eventType) {
      var participants;
      participants = new Strava.Challenges.ParticipantCollection();
      participants.bind('reset', (function(_this) {
        return function() {
          return _this.dispatchEvent(eventType);
        };
      })(this));
      this.filtered_leaderboards[eventType] = participants;
      return this.filtered_leaderboards[eventType + "_athlete"] = {
        id: null,
        rank: null,
        delta_dimension: null
      };
    };

    ChallengeController.prototype.setFilter = function(value) {
      var filter, leaderBoard, options;
      if (!value) {
        return;
      }
      filter = this.filter;
      leaderBoard = '';
      switch (value) {
        case "all":
          if (this.filter instanceof Strava.Challenges.AllFilter) {
            return;
          }
          filter = new Strava.Challenges.AllFilter();
          leaderBoard = 'overallChange';
          break;
        case "female":
          if (this.filter instanceof Strava.Challenges.FemaleFilter) {
            return;
          }
          filter = new Strava.Challenges.FemaleFilter();
          leaderBoard = 'overallFemaleChange';
          break;
        case "male":
          if (this.filter instanceof Strava.Challenges.MaleFilter) {
            return;
          }
          filter = new Strava.Challenges.MaleFilter();
          leaderBoard = 'overallMaleChange';
          break;
        default:
          return;
      }
      options = {
        filtered: true,
        data: {
          leaderBoardType: leaderBoard
        },
        success: (function(_this) {
          return function(response) {
            _this.filter = filter;
            _this.leaderBoardType = leaderBoard;
            return _this.dispatchEvent('filterChange');
          };
        })(this)
      };
      return this.fetch(options);
    };

    ChallengeController.prototype.setLeaderBoard = function(leaderBoard, successHandler) {
      var options;
      if (leaderBoard === 'overallChange' && this.filter.type() !== 'AllFilter') {
        leaderBoard = this.setLeaderBoardForOverallGender(leaderBoard);
      }
      options = {
        filtered: true,
        data: {
          leaderBoardType: leaderBoard
        },
        success: (function(_this) {
          return function() {
            _this.leaderBoardType = leaderBoard;
            return successHandler();
          };
        })(this)
      };
      return this.fetch(options);
    };

    ChallengeController.prototype.setGranularFilter = function(type, value) {
      var options;
      options = {
        filtered: true,
        data: {
          filterType: type,
          filterValue: value
        },
        success: (function(_this) {
          return function(response) {
            return _this.dispatchEvent('filterViewChange');
          };
        })(this)
      };
      return this.fetch(options);
    };

    ChallengeController.prototype.dataForEventType = function(eventType) {
      switch (eventType) {
        case this.klazz().OVERALL_CHANGE:
          return this.overall;
        case this.klazz().FOLLOW_FILTER_CHANGE:
        case this.klazz().CLUB_FILTER_CHANGE:
        case this.klazz().AGE_FILTER_CHANGE:
        case this.klazz().COUNTRY_FILTER_CHANGE:
        case this.klazz().WEIGHT_FILTER_CHANGE:
          return this.filtered_leaderboards[eventType];
        case this.klazz().OVERALL_FEMALE_CHANGE:
          return this.overall_female;
        case this.klazz().OVERALL_MALE_CHANGE:
          return this.overall_male;
      }
      return this.overall;
    };

    ChallengeController.prototype.athleteDataForEventType = function(eventType) {
      switch (eventType) {
        case this.klazz().OVERALL_CHANGE:
          return this.overall_athlete;
        case this.klazz().FOLLOW_FILTER_CHANGE:
        case this.klazz().CLUB_FILTER_CHANGE:
        case this.klazz().AGE_FILTER_CHANGE:
        case this.klazz().COUNTRY_FILTER_CHANGE:
        case this.klazz().WEIGHT_FILTER_CHANGE:
          return this.filtered_leaderboards[eventType + "_athlete"];
        case this.klazz().OVERALL_FEMALE_CHANGE:
          return this.overall_female_athlete;
        case this.klazz().OVERALL_MALE_CHANGE:
          return this.overall_male_athlete;
      }
      return this.overall_athlete;
    };

    ChallengeController.prototype.dispatchEvent = function(event, data) {
      return this.trigger(event, data);
    };

    ChallengeController.prototype.fetch = function(options) {
      var chained_success, filtered;
      this.trigger('fetch');
      chained_success = options ? options.success : null;
      filtered = options ? options.filtered != null : false;
      return ChallengeController.__super__.fetch.call(this, jQuery().extend(true, options, {
        cache: false,
        success: (function(_this) {
          return function(model, response) {
            var athlete, fn, i, len, ref;
            _this.countries = response.countries;
            _this.convertor.setMetric(response.conversion);
            _this.convertor.setGoal(response.goal);
            ref = response.overall;
            fn = function(athlete) {
              return athlete.rank = '-';
            };
            for (i = 0, len = ref.length; i < len; i++) {
              athlete = ref[i];
              fn(athlete);
            }
            _this.overall_female.reset(response.overall_female, _this.athletes);
            _this.overall_female_athlete = response.overall_female_athlete;
            _this.overall_male.reset(response.overall_male, _this.athletes);
            _this.overall_male_athlete = response.overall_male_athlete;
            _this.overall.reset(response.overall, _this.athletes);
            _this.overall_athlete = response.overall_athlete;
            _this.update_filtered_leaderboards(_this.klazz().FOLLOW_FILTER_CHANGE, response.follow_filter, _this.athletes, response.follow_filter_athlete);
            _this.update_filtered_leaderboards(_this.klazz().AGE_FILTER_CHANGE, response.age_filter, _this.athletes, response.age_filter_athlete);
            _this.update_filtered_leaderboards(_this.klazz().CLUB_FILTER_CHANGE, response.club_filter, _this.athletes, response.club_filter_athlete);
            _this.update_filtered_leaderboards(_this.klazz().COUNTRY_FILTER_CHANGE, response.country_filter, _this.athletes, response.country_filter_athlete);
            _this.update_filtered_leaderboards(_this.klazz().WEIGHT_FILTER_CHANGE, response.weight_filter, _this.athletes, response.weight_filter_athlete);
            if (filtered) {
              _this.dispatchEvent('soft_ready', response);
            } else {
              _this.dispatchEvent('ready');
            }
            if (chained_success) {
              return chained_success(response);
            }
          };
        })(this)
      }));
    };

    ChallengeController.prototype.setLeaderBoardForOverallGender = function(leaderBoardType) {
      if (this.filter.type() === 'MaleFilter') {
        return 'overallMaleChange';
      } else if (this.filter.type() === 'FemaleFilter') {
        return 'overallFemaleChange';
      }
    };

    ChallengeController.prototype.update_filtered_leaderboards = function(eventType, leaderboard, athletes, athleteInformation) {
      this.filtered_leaderboards[eventType + "_athlete"] = athleteInformation;
      return this.filtered_leaderboards[eventType].reset(leaderboard, athletes);
    };

    ChallengeController.prototype.parse = function(response, xhr) {
      this.athletes = response.athletes;
      this.updateCurrentAthlete(response.current_athlete);
      this.updateParticipants(response.overall);
      this.updateParticipants(response.overall_male);
      this.updateParticipants(response.overall_female);
      this.updateParticipants(response.follow_filter);
      this.updateParticipants(response.age_filter);
      this.updateParticipants(response.club_filter);
      this.updateParticipants(response.country_filter);
      this.updateParticipants(response.weight_filter);
      this.convertor.setDimension(response.dimension);
      this.convertor.setChallengeType(response.type);
      return {
        id: response.id,
        goal: response.goal,
        dimension: response.dimension,
        type: response.type,
        totals: response.totals,
        began: response.began,
        starts: response.starts,
        conversion: response.conversion,
        days_remaining: response.days_remain
      };
    };

    ChallengeController.prototype.updateCurrentAthlete = function(athlete) {
      var current_athlete, data;
      if (!athlete) {
        this.set({
          current_athlete: null
        });
        return;
      }
      data = this.athletes[athlete.id];
      current_athlete = {
        id: athlete.id,
        rank: athlete.rank,
        delta_distance: athlete.delta_distance,
        delta_elevation: athlete.delta_elevation
      };
      jQuery.extend(true, current_athlete, data);
      return this.set({
        current_athlete: current_athlete
      });
    };

    ChallengeController.prototype.areFemalesInChallenge = function() {
      return this.overall_female.length > 0;
    };

    ChallengeController.prototype.areMalesInChallenge = function() {
      return this.overall_male.length > 0;
    };

    ChallengeController.prototype.updateParticipants = function(participants) {
      var i, len, participant, results;
      results = [];
      for (i = 0, len = participants.length; i < len; i++) {
        participant = participants[i];
        if (participant.rank === 1) {
          results.push(participant.isLeader = true);
        }
      }
      return results;
    };

    ChallengeController.prototype.getMetaData = function() {
      var day_str;
      day_str = 'Day';
      if (this.get('starts') > 1) {
        day_str += 's';
      }
      return {
        id: this.get('id'),
        goal: this.get('goal'),
        type: this.get('type'),
        dimension: this.get('dimension'),
        totals: this.get('totals'),
        began: this.get('began'),
        starts_in: this.get('starts'),
        starts_str: day_str,
        current_athlete: this.get('current_athlete'),
        conversion: this.get('conversion'),
        days_remaining: this.get('days_remaining')
      };
    };

    ChallengeController.prototype.klazz = function() {
      return Strava.Challenges.ChallengeController;
    };

    return ChallengeController;

  })(Backbone.Model);

  Strava.Challenges.Filter = (function() {
    function Filter() {}

    Filter.prototype.filter = function(participant, closure) {
      var rank;
      rank = participant.get('rank');
      if (!rank) {
        return;
      }
      if (participant.get('rank') <= 0) {
        return;
      }
      return closure();
    };

    Filter.prototype.type = function() {
      return 'Filter';
    };

    return Filter;

  })();

  Strava.Challenges.AllFilter = (function(superClass) {
    extend(AllFilter, superClass);

    function AllFilter() {
      return AllFilter.__super__.constructor.apply(this, arguments);
    }

    AllFilter.prototype.filter = function(participant, closure) {
      return AllFilter.__super__.filter.call(this, participant, closure);
    };

    AllFilter.prototype.type = function() {
      return 'AllFilter';
    };

    return AllFilter;

  })(Strava.Challenges.Filter);

  Strava.Challenges.FemaleFilter = (function(superClass) {
    extend(FemaleFilter, superClass);

    function FemaleFilter() {
      return FemaleFilter.__super__.constructor.apply(this, arguments);
    }

    FemaleFilter.prototype.filter = function(participant, closure) {
      var sex;
      sex = participant.get('sex');
      if (!sex) {
        return;
      }
      if (sex !== 'F') {
        return;
      }
      return FemaleFilter.__super__.filter.call(this, participant, closure);
    };

    FemaleFilter.prototype.type = function() {
      return 'FemaleFilter';
    };

    return FemaleFilter;

  })(Strava.Challenges.Filter);

  Strava.Challenges.MaleFilter = (function(superClass) {
    extend(MaleFilter, superClass);

    function MaleFilter() {
      return MaleFilter.__super__.constructor.apply(this, arguments);
    }

    MaleFilter.prototype.filter = function(participant, closure) {
      var sex;
      sex = participant.get('sex');
      if (!sex) {
        return;
      }
      if (sex !== 'M') {
        return;
      }
      return MaleFilter.__super__.filter.call(this, participant, closure);
    };

    MaleFilter.prototype.type = function() {
      return 'MaleFilter';
    };

    return MaleFilter;

  })(Strava.Challenges.Filter);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['ui/paginated_template'] = function(context) {
    return (function() {
      var $c, $o;
      $c = window.HAML.cleanValue;
      $o = [];
      if (this.pages > 1) {
        $o.push("<span class='pages'>" + ($c(Strava.I18n.Locale.t('templates.ui.paginated_html', {
          start: this.range[0],
          end: this.range[1],
          total: this.total
        }))) + "</span>\n<ul class='switches'>\n  <li>");
        if (this.prev) {
          $o.push("    <button class='btn btn-default btn-sm button previous_page'>&#8592;</button>");
        } else {
          $o.push("    <span class='btn btn-default btn-sm button disabled previous_page'>&#8592;</span>");
        }
        $o.push("  </li>\n  <li>");
        if (this.next) {
          $o.push("    <button class='btn btn-default btn-sm next_page' href='#'>&#8594;</button>");
        } else {
          $o.push("    <span class='btn btn-default btn-sm button disabled next_page'>&#8594;</span>");
        }
        $o.push("  </li>\n</ul>");
      }
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  Strava.module('Strava.Challenges');

  Strava.Challenges.ChallengeInitializer = (function() {
    function ChallengeInitializer() {}

    ChallengeInitializer.context = null;

    ChallengeInitializer.assemble = function(challenge, currentAthlete, filterDefaults, discussionsSelected) {
      this.buildContext(challenge, currentAthlete, filterDefaults, discussionsSelected);
      this.buildControllers();
      this.buildTabs();
      this.context.challengeStatsView = new Strava.Challenges.ChallengeStatsView(this.context.challengeController);
      if (challenge.inChallenge()) {
        this.context.athleteStatsView = new Strava.Challenges.AthleteStatsView(this.context.challengeController);
      }
      return this.context;
    };

    ChallengeInitializer.buildContext = function(challenge, currentAthlete, filterDefaults, discussionsSelected) {
      return this.context = {
        challenge: challenge,
        currentAthlete: currentAthlete,
        started: challenge.started(),
        type: challenge.get('type'),
        filterDefaults: filterDefaults,
        scroller: new Strava.Challenges.ScrollOnPageChange(),
        discussionsSelected: discussionsSelected
      };
    };

    ChallengeInitializer.buildControllers = function() {
      var overallParticipantCollectionAdapter, postCollectionAdapter;
      this.context.challengeController = new Strava.Challenges.ChallengeController(this.context.challenge.get('id'), new Strava.Challenges.Convertor(this.context.challenge), this.context.filterDefaults, this.context.currentAthlete);
      overallParticipantCollectionAdapter = new Strava.Challenges.OverallParticipantCollectionAdapter(this.context.challengeController);
      this.context.scroller.addAdapter(overallParticipantCollectionAdapter);
      this.context.overallPagingController = new Strava.Ui.PagingController(overallParticipantCollectionAdapter);
      this.buildPagingController('age_paging', 'agePagingController', 'ageFilterViewChange', 'age');
      this.buildPagingController('weight_paging', 'weightPagingController', 'weightFilterViewChange', 'weight');
      this.buildPagingController('country_paging', 'countryPagingController', 'countryFilterViewChange', 'country');
      this.buildPagingController('club_paging', 'clubPagingController', 'clubFilterViewChange', 'club_members');
      this.buildPagingController('following_paging', 'followingPagingController', 'followFilterViewChange', 'following');
      if (this.context.currentAthlete.isLoggedIn()) {
        this.context.discussionController = new Strava.Discussions.DiscussionController(this.context.challenge);
        postCollectionAdapter = new Strava.Discussions.PostCollectionAdapter(this.context.discussionController);
        return this.context.discussionPagingController = new Strava.Ui.PagingController(postCollectionAdapter);
      }
    };

    ChallengeInitializer.buildPagingController = function(type, key, eventType, filterType) {
      var adapter;
      adapter = new Strava.Challenges.ParticipantCollectionAdapter(this.context.challengeController, type, eventType, filterType);
      this.context.scroller.addAdapter(adapter);
      return this.context[key] = new Strava.Ui.PagingController(adapter);
    };

    ChallengeInitializer.buildFiltersTab = function(selector, eventType, filterSelector, requiresPremium, pagingController) {
      var bindDropdown, filter, klass, paginatedView, participantsView, viewFactory;
      paginatedView = new Strava.Ui.PaginatedView({
        previous: ".previous_page",
        next: ".next_page",
        template: "ui/paginated_template"
      }, pagingController);
      bindDropdown = requiresPremium ? this.context.currentAthlete.hasLeaderboardsAccess() : true;
      filter = new Strava.Challenges.GranularFilterView(this.context.challengeController, eventType, filterSelector, bindDropdown);
      if (eventType === 'countryFilterViewChange') {
        filter = new Strava.Challenges.CountryFilterView(this.context.challengeController, eventType, filterSelector);
      }
      klass = requiresPremium && !this.context.currentAthlete.hasLeaderboardsAccess() ? Strava.Challenges.PremiumUpsellView : Strava.Challenges.ParticipantsView;
      viewFactory = Strava.Challenges.ViewFactory.createParticipantFactory(this.context.challenge);
      participantsView = new klass(this.context.challengeController, eventType, '#tab-contents', filter, paginatedView, viewFactory);
      this.context.tabs.push({
        selector: selector,
        eventType: eventType,
        renderer: participantsView,
        selected: false
      });
      return jQuery("li" + selector).show();
    };

    ChallengeInitializer.buildDiscussionsTab = function() {
      var paginatedView;
      paginatedView = new Strava.Discussions.MorePostsView(this.context.discussionPagingController);
      this.context.discussionView = new Strava.Discussions.DiscussionView(this.context.discussionController, '#tab-contents', paginatedView, {
        persistentPrompt: true
      });
      this.context.tabs.push({
        selector: 'li#discussions-tab',
        renderer: this.context.discussionView,
        selected: this.context.discussionsSelected || !this.context.started
      });
      return jQuery('li#discussions-tab').show();
    };

    ChallengeInitializer.buildOverallTab = function() {
      var filter, paginatedView, viewFactory;
      paginatedView = new Strava.Ui.PaginatedView({
        previous: ".previous_page",
        next: ".next_page",
        template: "ui/paginated_template"
      }, this.context.overallPagingController);
      filter = new Strava.Challenges.FilterView(this.context.challengeController);
      viewFactory = Strava.Challenges.ViewFactory.createOverallParticipantFactory(this.context.challengeController, this.context.challenge);
      this.context.tabs.push({
        selector: 'li#overall-tab',
        eventType: 'overallChange',
        renderer: new Strava.Challenges.ParticipantsView(this.context.challengeController, 'overallChange', '#tab-contents', filter, paginatedView, viewFactory),
        selected: this.context.started && !this.context.discussionsSelected
      });
      return jQuery('li#overall-tab').show();
    };

    ChallengeInitializer.buildTabs = function() {
      this.context.tabs = [];
      if (this.context.started) {
        this.buildOverallTab();
      }
      if (this.context.currentAthlete.isLoggedIn()) {
        this.buildDiscussionsTab();
        if (this.context.started) {
          this.buildFiltersTab('#clubs-tab', 'clubFilterViewChange', '#club-list-template', false, this.context.clubPagingController);
          this.buildFiltersTab('#following-tab', 'followFilterViewChange', null, false, this.context.followingPagingController);
          this.buildFiltersTab('#age-tab', 'ageFilterViewChange', '#age-list-template', true, this.context.agePagingController);
          this.buildFiltersTab('#weight-tab', 'weightFilterViewChange', '#weight-list-template', true, this.context.weightPagingController);
          if (!this.context.challenge.segmentBased()) {
            this.buildFiltersTab('#country-tab', 'countryFilterViewChange', '#country-list-template', false, this.context.countryPagingController);
          }
        }
      }
      if (this.context.tabs.length > 0) {
        jQuery('ul.tabs').show();
        this.context.tabController = new Strava.Ui.TabController(this.context.tabs, '#challenge-tabs');
        this.context.fetchLeaderBoard = new Strava.Challenges.FetchLeaderBoard(this.context.challengeController, this.context.tabController);
        this.context.tabController.tabClickHandler(function(controller, tab) {
          this.context.discussionView.turnShownOff();
          return this.context.fetchLeaderBoard.execute(tab);
        });
        jQuery('#tab-contents .loading-panel').first().show();
        this.context.challengeController.bind('ready', (function(_this) {
          return function() {
            return _this.context.tabController.render();
          };
        })(this));
        return this.context.challengeController.bind('soft_ready', function() {
          return jQuery('#tab-contents .loading-panel').first().hide();
        });
      }
    };

    return ChallengeInitializer;

  })();

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['challenges/join_button'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      if (this.get('external_url')) {
        $o.push("<a class='alt button join-button' id='" + ($e($c(this.get('id')))) + "' href='" + ($e($c(this.get('external_url')))) + "' str-on='click' str-trackable-id='" + ($e($c(this.get('trackable_id')))) + "' str-type='join'>");
        $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.challenges.join_button.register_v2'))));
        $o.push("</a>");
      } else {
        $o.push("<button class='alt button join-button' id='" + ($e($c(this.get('id')))) + "' str-on='click' str-trackable-id='" + ($e($c(this.get('trackable_id')))) + "' str-type='join'>");
        $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.challenges.join_button.join_now'))));
        $o.push("</button>");
      }
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['challenges/percent_completed'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='challenge-progress'>\n  <div class='challenge-completion' role='progressbar' aria-valuenow='" + ($e($c(this.get('current_athlete_percentage')))) + "' aria-valuemin='0' aria-valuemax='100' style='width: " + ($e($c(this.get('current_athlete_percentage')))) + "%'></div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['challenges/best_effort'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      if (this.attributes.hasOwnProperty('best_effort')) {
        $o.push("<div class='best-effort'>");
        $o.push("  " + $e($c((Strava.I18n.Locale.t("templates.challenges.best_effort.time")) + ": " + (this.get('best_effort')))));
        $o.push("</div>");
      }
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.ChallengeStatusView = (function(superClass) {
    extend(ChallengeStatusView, superClass);

    function ChallengeStatusView() {
      return ChallengeStatusView.__super__.constructor.apply(this, arguments);
    }

    ChallengeStatusView.prototype.initialize = function() {
      return this.template = this.model.get('in_challenge') ? this.model.get('current_athlete_percentage') != null ? 'challenges/percent_completed' : this.model.get('best_effort') != null ? 'challenges/best_effort' : void 0 : !this.model.get('ended') ? 'challenges/join_button' : void 0;
    };

    ChallengeStatusView.prototype.challengeJoined = function() {
      this.model.set({
        current_athlete_percentage: 0
      });
      this.template = this.model.get('dimension') === 'distance_best_effort' ? 'challenges/best_effort' : 'challenges/percent_completed';
      return this.render(null);
    };

    ChallengeStatusView.prototype.render = function(controller) {
      if (this.template !== void 0) {
        this.$el.empty();
        this.renderTemplate(this.model);
        if (!this.model.ended && !this.model.get('external_url')) {
          this.$el.find('.join-button').click(function(event) {
            return controller.joinChallenge(event);
          });
        }
      }
      return this;
    };

    ChallengeStatusView.prototype.disableJoin = function() {
      return this.$el.find('.join-button').addClass('joining');
    };

    return ChallengeStatusView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.ChallengeStatsView = (function(superClass) {
    extend(ChallengeStatsView, superClass);

    ChallengeStatsView.prototype.el = '#header-stats';

    function ChallengeStatsView(challengeController) {
      ChallengeStatsView.__super__.constructor.call(this);
      if (!(this.templateExists('#header-stats-started-template') && this.templateExists('#header-stats-template'))) {
        return;
      }
      this.challengeController = challengeController;
      this.challengeStartTemplate = _.template(jQuery('#header-stats-started-template').html());
      this.challengeTemplate = _.template(jQuery('#header-stats-template').html());
      this.challengeController.one('ready', this.render, this);
    }

    ChallengeStatsView.prototype.templateExists = function(selector) {
      var $t;
      $t = this.$$(selector);
      return $t[0];
    };

    ChallengeStatsView.prototype.render = function() {
      var challenge_type, data;
      data = jQuery.extend({}, this.challengeController.getMetaData());
      challenge_type = this.challengeController.get('type');
      data.totals.participants = this.challengeController.convertor.formatNumber(data.totals.participants);
      if (challenge_type === 'SegmentChallenge') {
        data.totals.activity_total = data.totals.num_activities;
      } else if (challenge_type === 'CumulativeChallenge' && this.challengeController.get('dimension') === 'elapsed_time') {
        data.totals.activity_total = this.challengeController.convertor.timeHash(data.totals.activity_total_raw);
      } else {
        data.totals.activity_total = this.challengeController.convertor.convertDataFormatted(data.totals.activity_total_raw);
      }
      if (data.began) {
        this.$el.html(this.challengeStartTemplate({
          data: data
        }));
      } else {
        this.$el.html(this.challengeTemplate({
          data: data
        }));
      }
      return this;
    };

    return ChallengeStatsView;

  })(Backbone.View);

}).call(this);
(function() {
  Strava.module('Strava.Challenges');

  Strava.Challenges.ChallengeStatusController = (function() {
    function ChallengeStatusController(model, mainChallengeView) {
      this.model = model;
      this.mainChallengeView = mainChallengeView;
      if (currentAthlete.get('logged_in')) {
        this.view = new Strava.Challenges.ChallengeStatusView({
          el: this.mainChallengeView.statusElement(),
          model: this.model
        }).render(this);
      }
    }

    ChallengeStatusController.prototype.joinChallenge = function(event) {
      event.preventDefault();
      this.view.disableJoin();
      return this.model.join().done((function(_this) {
        return function() {
          return _this.challengeJoined();
        };
      })(this));
    };

    ChallengeStatusController.prototype.challengeJoined = function() {
      this.mainChallengeView.displayJoinedTag();
      return this.view.challengeJoined();
    };

    return ChallengeStatusController;

  })();

}).call(this);
(function() {
  Strava.module('Strava.Challenges');

  Strava.Challenges.Convertor = (function() {
    function Convertor(challenge) {
      this.challenge = challenge;
      if (this.challenge) {
        this.unitSystem = this.challenge.get('measurement_unit');
        if (this.unitSystem === 'english') {
          this.unitSystem = 'imperial';
        }
      }
    }

    Convertor.prototype.setDimension = function(dimension) {
      return this.dimension = dimension;
    };

    Convertor.prototype.setChallengeType = function(challenge_type) {
      return this.challengeType = challenge_type;
    };

    Convertor.prototype.setGoal = function(goal) {
      return this.goal = goal;
    };

    Convertor.prototype.getBehindLeaderFormatted = function(delta_dimension) {
      if (this.dimension === 'elapsed_time') {
        return this.formatTime(delta_dimension);
      }
      if (delta_dimension === 0) {
        return '-';
      } else {
        return new TwitterCldr.DecimalFormatter().format(this.convertDataRounded(delta_dimension));
      }
    };

    Convertor.prototype.getPercentage = function(completed) {
      return completed / this.goal * 100;
    };

    Convertor.prototype.displayPercent = function(percent) {
      return new Strava.I18n.PercentFormatter().formatShort(percent, 0);
    };

    Convertor.prototype.getPercentageFormatted = function(completed) {
      if (completed === 0) {
        return 0;
      }
      return Math.floor(this.getPercentage(completed));
    };

    Convertor.prototype.setMetric = function(metric) {
      return this.metric = metric;
    };

    Convertor.prototype.convertData = function(data) {
      return data * this.metric;
    };

    Convertor.prototype.convertDataRounded = function(data, precision) {
      var value;
      if (precision == null) {
        precision = 0;
      }
      if (precision === 0) {
        return parseInt(this.convertData(data).toFixed(precision), 10);
      } else {
        value = Math.floor(this.convertData(data) * 10) / 10;
        return value.toFixed(precision);
      }
    };

    Convertor.prototype.convertDataFormatted = function(data, precision) {
      if (precision == null) {
        precision = 0;
      }
      if (this.dimension === 'elapsed_time') {
        if (this.challengeType === 'CumulativeChallenge') {
          return this.formatSpecialTime(data);
        } else {
          return this.formatTime(data);
        }
      } else {
        return new TwitterCldr.DecimalFormatter().format(this.convertDataRounded(data, precision));
      }
    };

    Convertor.prototype.timeHash = function(data) {
      var hours, minutes, ref, seconds, values;
      values = {
        hours: 0,
        minutes: 0,
        seconds: 0
      };
      if (data === 0) {
        return values;
      }
      ref = new Strava.I18n.TimespanFormatter().hoursMinutesSeconds(data), hours = ref[0], minutes = ref[1], seconds = ref[2];
      values.hours = hours.toFixed(0);
      values.minutes = minutes.toFixed(0);
      values.seconds = seconds.toFixed(0);
      return values;
    };

    Convertor.prototype.formatNumber = function(data) {
      return new TwitterCldr.DecimalFormatter().format(data);
    };

    Convertor.prototype.formatTime = function(data) {
      if (data === 0) {
        return '--:--';
      }
      return new Strava.I18n.TimespanFormatter().display(data);
    };

    Convertor.prototype.formatSpecialTime = function(data) {
      var hours, minutes, ref, seconds;
      ref = new Strava.I18n.TimespanFormatter().paddedHoursMinutesSeconds(data), hours = ref[0], minutes = ref[1], seconds = ref[2];
      return {
        hours: hours,
        minutes: minutes
      };
    };

    return Convertor;

  })();

}).call(this);
(function() {
  Strava.module('Strava.Challenges');

  Strava.Challenges.FetchLeaderBoard = (function() {
    function FetchLeaderBoard(controller, tabController) {
      this.controller = controller;
      this.tabController = tabController;
    }

    FetchLeaderBoard.prototype.execute = function(tab) {
      return this.controller.setLeaderBoard(tab.eventType, (function(_this) {
        return function() {
          if (!tab.renderer.selected) {
            return _this.tabController.showTab(tab);
          }
        };
      })(this));
    };

    return FetchLeaderBoard;

  })();

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.NOPFilterView = (function() {
    function NOPFilterView() {}

    NOPFilterView.prototype.render = function(contents) {};

    NOPFilterView.prototype.getEventType = function(eventType) {
      return eventType;
    };

    return NOPFilterView;

  })();

  Strava.Challenges.GranularFilterView = (function(superClass) {
    extend(GranularFilterView, superClass);

    function GranularFilterView(challengeController, type, templateSelector, bindDropdown) {
      if (templateSelector == null) {
        templateSelector = null;
      }
      if (bindDropdown == null) {
        bindDropdown = true;
      }
      this.templateSelector = templateSelector;
      this.challengeController = challengeController;
      this.bindDropdown = bindDropdown;
      this.type = type;
      GranularFilterView.__super__.constructor.call(this);
    }

    GranularFilterView.prototype.render = function(contents) {
      var $contents;
      if (this.templateSelector == null) {
        return this;
      }
      $contents = jQuery(contents);
      this.create_template(this.templateSelector);
      jQuery('#granular-filters', $contents).show().html(this.template({}));
      this.handleInitialValue(contents);
      jQuery('ul.options a', $contents).click((function(_this) {
        return function(e) {
          _this.handleListClick(e, contents);
          return e.preventDefault();
        };
      })(this));
      return this;
    };

    GranularFilterView.prototype.handleInitialValue = function(contents) {
      var state, text;
      state = this.challengeController.get_filtered_leaderboard_state(this.type);
      text = jQuery("a[data-value='" + state + "']", contents).text();
      return this.handleValue(text, contents);
    };

    GranularFilterView.prototype.handleListClick = function(eventData, contents) {
      var $elem;
      $elem = jQuery(eventData.target);
      this.handleValue($elem.text(), contents);
      if (this.bindDropdown) {
        this.challengeController.set_filtered_leaderboard_state(this.type, $elem.data('value'));
        return this.challengeController.setGranularFilter($elem.data('type'), $elem.data('value'));
      }
    };

    GranularFilterView.prototype.handleValue = function(value, contents) {
      return jQuery('.drop-down-menu', contents).find('.selection').text(value);
    };

    GranularFilterView.prototype.getEventType = function(eventType) {
      return eventType;
    };

    return GranularFilterView;

  })(Backbone.View);

  Strava.Challenges.CountryFilterView = (function(superClass) {
    extend(CountryFilterView, superClass);

    function CountryFilterView(challengeController, type) {
      this.challengeController = challengeController;
      this.type = type;
      this.countries = [];
      this.challengeController.bind('ready', (function(_this) {
        return function() {
          var country, i, len, ref, results;
          ref = _this.challengeController.countries;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            country = ref[i];
            results.push((function(country) {
              return _this.countries.push({
                id: country,
                text: country
              });
            })(country));
          }
          return results;
        };
      })(this));
      CountryFilterView.__super__.constructor.call(this);
    }

    CountryFilterView.prototype.render = function(contents) {
      var $contents, $elem;
      $contents = jQuery(contents);
      this.create_template('#country-list-template');
      jQuery('#granular-filters', $contents).show().html(this.template({}));
      $elem = $contents.find('input[name=country_field]');
      $elem.select2({
        placeholder: 'Select a Country',
        initSelection: (function(_this) {
          return function(element, callback) {
            var data;
            data = {
              id: _this.countries[0]['id'],
              text: _this.countries[0]['text']
            };
            return callback(data);
          };
        })(this),
        data: this.countries,
        width: 'element'
      }).bind('change', (function(_this) {
        return function() {
          _this.challengeController.set_filtered_leaderboard_state(_this.type, $elem.val());
          return _this.challengeController.setGranularFilter($elem.data('type'), $elem.val());
        };
      })(this));
      $elem.select2('val', {
        id: this.challengeController.get_filtered_leaderboard_state(this.type),
        text: this.challengeController.get_filtered_leaderboard_state(this.type)
      });
      $contents.find('form').submit((function(_this) {
        return function() {
          _this.challengeController.set_filtered_leaderboard_state(_this.type, $elem.val());
          _this.challengeController.setGranularFilter($elem.data('type'), $elem.val());
          return false;
        };
      })(this));
      return this;
    };

    CountryFilterView.prototype.getEventType = function(eventType) {
      var useType;
      return useType = eventType;
    };

    return CountryFilterView;

  })(Backbone.View);

  Strava.Challenges.FilterView = (function(superClass) {
    extend(FilterView, superClass);

    function FilterView(challengeController) {
      this.challengeController = challengeController;
      FilterView.__super__.constructor.call(this);
    }

    FilterView.prototype.render = function(contents) {
      var $contents, filter;
      $contents = jQuery(contents);
      jQuery('#filters', $contents).show();
      jQuery('input[name=filter]:radio', $contents).bind('click', (function(_this) {
        return function(eventData) {
          return _this.handleFilterClick(eventData);
        };
      })(this));
      filter = this.challengeController.filter;
      switch (filter.type()) {
        case 'Filter':
        case 'AllFilter':
          jQuery('input[name=filter]:radio#filter_all', $contents).prop('checked', true);
          break;
        case 'FemaleFilter':
          jQuery('input[name=filter]:radio#filter_female', $contents).prop('checked', true);
          break;
        case 'MaleFilter':
          jQuery('input[name=filter]:radio#filter_male', $contents).prop('checked', true);
      }
      return this;
    };

    FilterView.prototype.handleFilterClick = function(eventData) {
      return this.challengeController.setFilter(eventData.target.value);
    };

    FilterView.prototype.getEventType = function(eventType) {
      var filter, useType;
      useType = eventType;
      filter = this.challengeController.filter;
      switch (filter.type()) {
        case 'Filter':
        case 'AllFilter':
          useType = eventType;
          break;
        case 'FemaleFilter':
          useType = 'overallFemaleChange';
          break;
        case 'MaleFilter':
          useType = 'overallMaleChange';
      }
      return useType;
    };

    return FilterView;

  })(Backbone.View);

}).call(this);
(function() {
  Strava.module('Strava.I18n');

  Strava.I18n.Locale = (function() {
    function Locale() {}

    Locale.COUNT_PARAMETER = 'count';

    Locale.DECIMAL_FORMATTER = new TwitterCldr.DecimalFormatter();

    Locale.t = function(key, params, dict, pluralize) {
      var found, i, j, keyElement, keyElements, len, len1, pluralForm, pluralForms, resolvedVal;
      if (params == null) {
        params = {};
      }
      if (dict == null) {
        dict = Strava.I18n.Locales.DICTIONARY;
      }
      if (pluralize == null) {
        pluralize = Strava.I18n.Locales.PLURALIZATION;
      }
      resolvedVal = dict;
      keyElements = key.split('.');
      if (Strava.I18n.Locale.COUNT_PARAMETER in params) {
        pluralForms = pluralize(params[Strava.I18n.Locale.COUNT_PARAMETER]);
      }
      for (i = 0, len = keyElements.length; i < len; i++) {
        keyElement = keyElements[i];
        resolvedVal = resolvedVal[keyElement];
        if (resolvedVal == null) {
          return key;
        }
      }
      if (pluralForms != null) {
        found = false;
        for (j = 0, len1 = pluralForms.length; j < len1; j++) {
          pluralForm = pluralForms[j];
          if (resolvedVal[pluralForm] != null) {
            resolvedVal = resolvedVal[pluralForm];
            found = true;
            break;
          }
        }
        if (!found) {
          return key;
        }
      }
      return this.resolve(resolvedVal, params);
    };

    Locale.resolve = function(resolvedValue, params) {
      return resolvedValue.replace(/%%|%{(\w+)}/g, function(match, key) {
        if (match === '%%') {
          return '%';
        } else {
          if (key in params) {
            if (key === Strava.I18n.Locale.COUNT_PARAMETER) {
              return Strava.I18n.Locale.DECIMAL_FORMATTER.format(params[key]);
            } else {
              return params[key];
            }
          } else {
            throw new Error("param " + key + " not provided");
          }
        }
      });
    };

    Locale.measurementPreference = function() {
      return window._measurement_preference;
    };

    Locale.unitSystem = function() {
      if (this.measurementPreference() === 'feet') {
        return 'imperial';
      } else {
        return 'metric';
      }
    };

    return Locale;

  })();

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.I18nConvertor = (function(superClass) {
    extend(I18nConvertor, superClass);

    function I18nConvertor() {
      return I18nConvertor.__super__.constructor.apply(this, arguments);
    }

    I18nConvertor.prototype.convertDataFormatted = function(data, precision) {
      if (precision == null) {
        precision = 0;
      }
      if (this.dimension === 'elapsed_time' || this.dimension === 'moving_time') {
        if (this.challengeType === 'CumulativeChallenge') {
          return this.formatHoursMinutes(data);
        } else {
          return this.formatTime(data);
        }
      } else {
        return this.formatter().format(data, precision);
      }
    };

    I18nConvertor.prototype.getBehindLeaderFormatted = function(delta_dimension) {
      if (this.dimension === 'elapsed_time') {
        return this.formatTime(delta_dimension);
      }
      if (delta_dimension === 0) {
        return '-';
      }
      return this.formatter().format(delta_dimension);
    };

    I18nConvertor.prototype.formatTime = function(seconds) {
      return new Strava.I18n.TimespanFormatter().display(seconds, true);
    };

    I18nConvertor.prototype.formatHoursMinutes = function(seconds) {
      return new Strava.I18n.TimespanFormatter().abbreviated(seconds, false);
    };

    I18nConvertor.prototype.formatter = function() {
      if (this.dimension === 'distance' || this.dimension === 'distance_with_average_speed') {
        return new Strava.I18n.DistanceFormatter(this.unitSystem);
      } else {
        return new Strava.I18n.ElevationFormatter(this.unitSystem);
      }
    };

    return I18nConvertor;

  })(Strava.Challenges.Convertor);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.OverallParticipantCollectionAdapter = (function(superClass) {
    extend(OverallParticipantCollectionAdapter, superClass);

    function OverallParticipantCollectionAdapter(challenge_controller) {
      OverallParticipantCollectionAdapter.__super__.constructor.call(this, challenge_controller);
      this.challenge_controller.bind('filterChange', (function(_this) {
        return function() {
          return _this.handleFilterChange();
        };
      })(this));
      this.overall_paging = {
        total: 0,
        page: 1,
        perPage: 50
      };
      this.overall_female_paging = {
        total: 0,
        page: 1,
        perPage: 50
      };
      this.overall_male_paging = {
        total: 0,
        page: 1,
        perPage: 50
      };
    }

    OverallParticipantCollectionAdapter.prototype.handleFilterChange = function() {
      var paging;
      paging = this.overall_paging;
      switch (this.challenge_controller.filter.type()) {
        case "Filter":
        case "AllFilter":
          paging = this.overall_paging;
          break;
        case "FemaleFilter":
          paging = this.overall_female_paging;
          break;
        case "MaleFilter":
          paging = this.overall_male_paging;
      }
      this.set({
        total: paging.total,
        page: paging.page,
        perPage: paging.perPage
      });
      return this.trigger('reset');
    };

    OverallParticipantCollectionAdapter.prototype.fetch = function(options) {
      var opts;
      opts = {
        data: {
          paging_type: 'overall',
          per_page: options.data.per_page,
          overall_page: this.overall_paging.page,
          overall_male_page: this.overall_male_paging.page,
          overall_female_page: this.overall_female_paging.page
        }
      };
      switch (this.challenge_controller.filter.type()) {
        case "Filter":
        case "AllFilter":
          opts.data.overall_page = options.data.page;
          break;
        case "FemaleFilter":
          opts.data.overall_female_page = options.data.page;
          break;
        case "MaleFilter":
          opts.data.overall_male_page = options.data.page;
      }
      return OverallParticipantCollectionAdapter.__super__.fetch.call(this, opts);
    };

    OverallParticipantCollectionAdapter.prototype.handleSuccess = function(response) {
      var paging;
      this.overall_paging = response.overall_paging;
      this.overall_male_paging = response.overall_male_paging;
      this.overall_female_paging = response.overall_female_paging;
      paging = this.overall_paging;
      switch (this.challenge_controller.filter.type()) {
        case "Filter":
        case "AllFilter":
          paging = this.overall_paging;
          break;
        case "FemaleFilter":
          paging = this.overall_female_paging;
          break;
        case "MaleFilter":
          paging = this.overall_male_paging;
      }
      this.set({
        total: paging.total,
        page: paging.page,
        perPage: paging.perPage
      });
      return this.trigger('reset');
    };

    return OverallParticipantCollectionAdapter;

  })(Strava.Challenges.CollectionAdapter);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava');

  Strava.base_module = {
    initializeAttributes: function(attributes) {
      var k, results, v;
      results = [];
      for (k in attributes) {
        v = attributes[k];
        results.push(this.initAttribute(k, v));
      }
      return results;
    },
    setOrGet: function(name, value) {
      if (value !== void 0) {
        this[name] = value;
        return this;
      } else {
        return this[name];
      }
    },
    initAttribute: function(attr, d) {
      var name;
      this.constructor.prototype[attr] = function(value) {
        return this.setOrGet(name, value);
      };
      name = "_" + attr;
      if (_.isObject(d) && !_.isFunction(d) && (d.constructor === Object.prototype.constructor || d.constructor === Array.prototype.constructor)) {
        return this[name] = _.clone(d);
      } else {
        return this[name] = d;
      }
    },
    create_template: function(selector) {
      var jq;
      jq = jQuery(selector);
      return this.template = _.template(jq.html());
    },
    create_template_for: function(selector) {
      var jq;
      jq = jQuery(selector);
      return _.template(jq.html());
    }
  };

  Strava.chart_module = {
    shouldAnimate: function(animate) {
      if (this.animate() != null) {
        return this.animate();
      } else {
        return animate;
      }
    }
  };

  Strava.local_storage_module = {
    initializeStorageAttributes: function(attributes, namespace, clear) {
      var k, results, v;
      if (clear == null) {
        clear = false;
      }
      if (clear) {
        this.setLocalStorage(namespace, {});
      }
      results = [];
      for (k in attributes) {
        v = attributes[k];
        results.push(this.initStorageAttribute(k, v, namespace));
      }
      return results;
    },
    getLocalStorage: function(namespace) {
      var stored;
      stored = localStorage[namespace];
      if (!stored) {
        return {};
      }
      return JSON.parse(localStorage[namespace]) || {};
    },
    setLocalStorage: function(namespace, store) {
      return localStorage[namespace] = JSON.stringify(store);
    },
    setOrGetStorage: function(name, value, namespace) {
      var store;
      store = this.getLocalStorage(namespace);
      if (value !== void 0) {
        store[name] = value;
        this.setLocalStorage(namespace, store);
        return this;
      } else {
        return store[name];
      }
    },
    initStorageAttribute: function(attr, d, namespace) {
      var name, stored;
      this.constructor.prototype[attr] = function(value) {
        return this.setOrGetStorage(name, value, namespace);
      };
      name = "_" + attr;
      if (_.isObject(d) && !_.isFunction(d) && (d.constructor === Object.prototype.constructor || d.constructor === Array.prototype.constructor)) {
        throw new Error('cannot store non-primitive types in localstorage');
      } else {
        stored = this.setOrGetStorage(name, void 0, namespace);
        if (stored !== void 0) {
          d = stored;
        }
        return this.setOrGetStorage(name, d, namespace);
      }
    }
  };

  Strava.Base = (function() {
    Strava.includeModule(Base, Backbone.Events);

    Strava.includeModule(Base, Strava.base_module);

    function Base() {}

    Base.prototype.$ = function(selector, scope) {
      return scope.find(selector);
    };

    Base.prototype.$$ = function(selector) {
      return jQuery(selector);
    };

    Base.prototype.$document = function() {
      return jQuery(document);
    };

    Base.prototype.one = function(ev, callback, context) {
      var c, e, func, that;
      that = this;
      c = callback;
      e = ev;
      func = function() {
        c.call(this);
        return that.unbind(e, func);
      };
      return this.bind(ev, func, context);
    };

    Base.prototype.createHandler = function(handler) {
      return function() {
        var args;
        args = Array.prototype.slice.call(arguments);
        args.unshift(this);
        return handler.apply(null, args);
      };
    };

    Base.prototype.isTouchDevice = function() {
      if (Modernizr) {
        return Modernizr.touch;
      } else {
        return false;
      }
    };

    return Base;

  })();

  Strava.Controller = (function(superClass) {
    extend(Controller, superClass);

    Strava.includeModule(Controller, Strava.base_module);

    function Controller() {
      Controller.__super__.constructor.call(this);
    }

    Controller.prototype.parse = function(response) {
      return {
        id: 0
      };
    };

    return Controller;

  })(Backbone.Model);

  Strava.Modern = {
    loadModernProxy: function() {
      var key;
      if ((self.StravaModern != null) && (Object.keys(self.StravaModern)[0] != null)) {
        key = Object.keys(StravaModern)[0];
        return StravaModern[key];
      } else {
        throw 'StravaModern proxy not loaded as part of page';
      }
    }
  };

  Strava.ReactComponentMounter = {
    mountComponent: function(props) {
      var proxy;
      proxy = Strava.Modern.loadModernProxy();
      return proxy.ReactComponentMounter.mountComponent(props);
    }
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.PageAssembler = (function(superClass) {
    var attributes;

    extend(PageAssembler, superClass);

    attributes = {
      club: {
        selector: '#clubs-tab',
        eventType: 'clubFilterViewChange',
        filterSelector: '#club-list-template',
        requiresPremium: false
      },
      following: {
        selector: '#following-tab',
        eventType: 'followFilterViewChange',
        filterSelector: null,
        requiresPremium: false
      },
      age: {
        selector: '#age-tab',
        eventType: 'ageFilterViewChange',
        filterSelector: '#age-list-template',
        requiresPremium: true
      },
      weight: {
        selector: '#weight-tab',
        eventType: 'weightFilterViewChange',
        filterSelector: '#weight-list-template',
        requiresPremium: true
      },
      country: {
        selector: '#country-tab',
        eventType: 'countryFilterViewChange',
        filterSelector: '#country-list-template',
        requiresPremium: false
      }
    };

    function PageAssembler() {
      PageAssembler.__super__.constructor.call(this);
      this.initializeAttributes(attributes);
      this.assembler = Strava.Challenges.ChallengeInitializer;
    }

    PageAssembler.prototype.assemble = function(challenge, currentAthlete, filterDefaults, discussionsSelected) {
      this.challenge = challenge;
      this.assembler.buildContext(challenge, currentAthlete, filterDefaults, discussionsSelected);
      this.assembler.buildControllers();
      this.buildTabs();
      this.assembler.context.challengeStatsView = new Strava.Challenges.ChallengeStatsView(this.assembler.context.challengeController);
      if (challenge.inChallenge()) {
        if (this.challenge.isVelocityBased()) {
          this.assembler.context.athleteStatsView = new Strava.Challenges.AthleteVelocityStatsView(this.assembler.context.challengeController);
        } else {
          this.assembler.context.athleteStatsView = new Strava.Challenges.AthleteStatsView(this.assembler.context.challengeController);
        }
      }
      return this.assembler.context;
    };

    PageAssembler.prototype.buildStartedTabs = function() {
      if (!this.assembler.context.started) {
        return;
      }
      return this.buildOverallTab();
    };

    PageAssembler.prototype.buildLoggedInTabs = function() {
      if (!this.assembler.context.currentAthlete.isLoggedIn()) {
        return;
      }
      return this.assembler.buildDiscussionsTab();
    };

    PageAssembler.prototype.buildStartedAndLoggedInTabs = function() {
      if (!(this.assembler.context.currentAthlete.isLoggedIn() && this.assembler.context.started)) {
        return;
      }
      this.buildFiltersTab('club', this.assembler.context.clubPagingController);
      this.buildFiltersTab('following', this.assembler.context.followingPagingController);
      this.buildFiltersTab('age', this.assembler.context.agePagingController);
      this.buildFiltersTab('weight', this.assembler.context.weightPagingController);
      if (!this.assembler.context.challenge.segmentBased()) {
        return this.buildFiltersTab('country', this.assembler.context.countryPagingController);
      }
    };

    PageAssembler.prototype.buildOverallTab = function() {
      var filter, paginatedView, participantFactory, participantsView;
      paginatedView = this.createPaginatedView(this.assembler.context.overallPagingController);
      filter = new Strava.Challenges.FilterView(this.assembler.context.challengeController);
      participantFactory = this.createParticipantFactory(true);
      participantsView = new Strava.Challenges.ParticipantsView(this.assembler.context.challengeController, 'overallChange', '#tab-contents', filter, paginatedView, participantFactory);
      this.assembler.context.tabs.push({
        selector: 'li#overall-tab',
        eventType: 'overallChange',
        renderer: participantsView,
        selected: this.assembler.context.started && !this.assembler.context.discussionsSelected
      });
      return jQuery('li#overall-tab').show();
    };

    PageAssembler.prototype.buildFiltersTab = function(type, controller) {
      var data, eventType, filterSelector, paginatedView, participantFactory, participantsView, requiresPremium, selector;
      data = this[type]();
      selector = data.selector;
      eventType = data.eventType;
      filterSelector = data.filterSelector;
      requiresPremium = data.requiresPremium;
      paginatedView = this.createPaginatedView(controller);
      participantFactory = this.createParticipantFactory(false);
      participantsView = this.assembler.context.currentAthlete.hasLeaderboardsAccess() ? this.createPremiumParticipantsView(eventType, filterSelector, paginatedView, participantFactory) : requiresPremium ? this.createUpsellParticipantsView(eventType, filterSelector, paginatedView, participantFactory) : this.createParticipantsView(eventType, filterSelector, paginatedView, participantFactory);
      this.assembler.context.tabs.push({
        selector: selector,
        eventType: eventType,
        renderer: participantsView,
        selected: false
      });
      return jQuery("li" + selector).show();
    };

    PageAssembler.prototype.createParticipantFactory = function(overall) {
      var controller, template;
      if (this.challenge.isPaceBased()) {
        template = '#challenge-participants-activity-row-template';
        if (overall) {
          controller = this.assembler.context.challengeController;
          return (function(_this) {
            return function(model) {
              return new Strava.Challenges.Renderers.OverallPaceParticipantRenderer(model, _this.challenge, controller, template);
            };
          })(this);
        } else {
          return (function(_this) {
            return function(model) {
              return new Strava.Challenges.Renderers.PaceParticipantRenderer(model, _this.challenge, template);
            };
          })(this);
        }
      } else {
        if (overall) {
          return Strava.Challenges.ViewFactory.createOverallParticipantFactory(this.assembler.context.challengeController, this.assembler.context.challenge);
        } else {
          return Strava.Challenges.ViewFactory.createParticipantFactory(this.assembler.context.challenge);
        }
      }
    };

    PageAssembler.prototype.createEventFilter = function(eventType, filterSelector, bindDropDown) {
      if (eventType === 'countryFilterViewChange') {
        return new Strava.Challenges.CountryFilterView(this.assembler.context.challengeController, eventType, filterSelector);
      } else {
        return new Strava.Challenges.GranularFilterView(this.assembler.context.challengeController, eventType, filterSelector, bindDropDown);
      }
    };

    PageAssembler.prototype.createPremiumParticipantsView = function(eventType, filterSelector, paginatedView, viewFactory) {
      var filter;
      filter = this.createEventFilter(eventType, filterSelector, true);
      return new Strava.Challenges.ParticipantsView(this.assembler.context.challengeController, eventType, '#tab-contents', filter, paginatedView, viewFactory);
    };

    PageAssembler.prototype.createParticipantsView = function(eventType, filterSelector, paginatedView, viewFactory) {
      var filter;
      filter = this.createEventFilter(eventType, filterSelector, true);
      return new Strava.Challenges.ParticipantsView(this.assembler.context.challengeController, eventType, '#tab-contents', filter, paginatedView, viewFactory);
    };

    PageAssembler.prototype.createUpsellParticipantsView = function(eventType, filterSelector, paginatedView, viewFactory) {
      var filter;
      filter = this.createEventFilter(eventType, filterSelector, false);
      return new Strava.Challenges.PremiumUpsellView(this.assembler.context.challengeController, eventType, '#tab-contents', filter, paginatedView, viewFactory);
    };

    PageAssembler.prototype.createPaginatedView = function(controller) {
      var options;
      options = {
        previous: ".previous_page",
        next: ".next_page",
        template: "ui/paginated_template"
      };
      return new Strava.Ui.PaginatedView(options, controller);
    };

    PageAssembler.prototype.buildTabController = function() {
      if (this.assembler.context.tabs.length === 0) {
        return;
      }
      jQuery('ul.tabs').show();
      this.assembler.context.tabController = new Strava.Ui.TabController(this.assembler.context.tabs, '#challenge-tabs');
      this.assembler.context.fetchLeaderBoard = new Strava.Challenges.FetchLeaderBoard(this.assembler.context.challengeController, this.assembler.context.tabController);
      this.assembler.context.tabController.tabClickHandler((function(_this) {
        return function(controller, tab) {
          return _this.assembler.context.fetchLeaderBoard.execute(tab);
        };
      })(this));
      jQuery('#tab-contents .loading-panel').first().show();
      this.assembler.context.challengeController.bind('ready', (function(_this) {
        return function() {
          return _this.assembler.context.tabController.render();
        };
      })(this));
      return this.assembler.context.challengeController.bind('soft_ready', function() {
        return jQuery('#tab-contents .loading-panel').first().hide();
      });
    };

    PageAssembler.prototype.buildTabs = function() {
      this.assembler.context.tabs = [];
      this.buildStartedTabs();
      this.buildLoggedInTabs();
      this.buildStartedAndLoggedInTabs();
      return this.buildTabController();
    };

    return PageAssembler;

  })(Strava.Base);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.ParticipantView = (function(superClass) {
    extend(ParticipantView, superClass);

    ParticipantView.prototype.tagName = 'tr';

    function ParticipantView(model, templateSelector1) {
      this.templateSelector = templateSelector1 != null ? templateSelector1 : '#challenge-participants-row-template';
      ParticipantView.__super__.constructor.call(this, {
        model: model
      });
    }

    ParticipantView.prototype.initialize = function() {
      return this.template = _.template(jQuery(this.templateSelector).html());
    };

    ParticipantView.prototype.render = function() {
      this.$el.html(this.template({
        data: this.getModelJSON()
      }));
      if (this.model.get('isLeader')) {
        this.$$().addClass('leader');
        this.$$().find('.avatar').removeClass('avatar-sm').addClass('avatar-md');
      }
      return this;
    };

    ParticipantView.prototype.getModelJSON = function() {
      var data, scalarFormatter;
      data = this.model.toJSON();
      data.activity_total = this.convertor.convertDataFormatted(data.activity_total_raw);
      data.progress_raw = this.convertor.getPercentageFormatted(data.activity_total_raw);
      data.progress_modified = Math.min(data.progress_raw, 100);
      data.behind_leader = this.convertor.getBehindLeaderFormatted(data.delta_dimension);
      data.percent = this.convertor.displayPercent(data.progress_raw);
      scalarFormatter = new TwitterCldr.DecimalFormatter();
      if (data.rank !== '-') {
        data.rank = scalarFormatter.format(data.rank, {
          precision: 0
        });
      }
      data.overall_rank = scalarFormatter.format(data.overall_rank, {
        precision: 0
      });
      return data;
    };

    return ParticipantView;

  })(Backbone.View);

  Strava.Challenges.OverallParticipantView = (function(superClass) {
    extend(OverallParticipantView, superClass);

    function OverallParticipantView(model, controller, templateSelector) {
      this.controller = controller;
      OverallParticipantView.__super__.constructor.call(this, model, templateSelector);
    }

    OverallParticipantView.prototype.render = function() {
      OverallParticipantView.__super__.render.call(this);
      if (this.controller.filter.type() === 'AllFilter') {
        this.$('td').first().removeClass('overall');
        if (this.model.get('isLeader')) {
          this.$$().find('.leader-prompt').show();
        }
      }
      return this;
    };

    return OverallParticipantView;

  })(Strava.Challenges.ParticipantView);

  Strava.Challenges.LeaderboardRankView = (function(superClass) {
    extend(LeaderboardRankView, superClass);

    function LeaderboardRankView() {
      return LeaderboardRankView.__super__.constructor.apply(this, arguments);
    }

    LeaderboardRankView.prototype.tagName = 'h3';

    LeaderboardRankView.prototype.initialize = function() {
      return this.create_template('#athlete-leaderboard-rank-template');
    };

    LeaderboardRankView.prototype.render = function() {
      this.render_template({
        data: this.getModelJSON()
      });
      return this;
    };

    LeaderboardRankView.prototype.getModelJSON = function() {
      var formatter, rank, total;
      formatter = new TwitterCldr.DecimalFormatter();
      rank = this.model.rank != null ? formatter.format(this.model.rank) : '-';
      total = this.model.total > 0 ? formatter.format(this.model.total) : '-';
      return {
        rank: rank,
        total: total
      };
    };

    return LeaderboardRankView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.ParticipantsView = (function(superClass) {
    extend(ParticipantsView, superClass);

    ParticipantsView.prototype.tagName = 'div';

    function ParticipantsView(challengeController1, eventType1, contents1, filter1, pagination1, factory1) {
      this.challengeController = challengeController1;
      this.eventType = eventType1;
      this.contents = contents1;
      this.filter = filter1;
      this.pagination = pagination1;
      this.factory = factory1 != null ? factory1 : (function(model) {
        return new Strava.Challenges.ParticipantView(model);
      });
      this.selected = false;
      this.create_template('#challenge-participants-template');
      this.challengeController.bind('fetch', (function(_this) {
        return function() {
          return _this.renderLoading();
        };
      })(this));
      this.challengeController.bind(this.eventType, (function(_this) {
        return function() {
          return _this.handleChange();
        };
      })(this));
      this.challengeController.bind('filterChange', (function(_this) {
        return function() {
          return _this.handleFilterChange();
        };
      })(this));
      ParticipantsView.__super__.constructor.call(this);
    }

    ParticipantsView.prototype.unselect = function() {
      return this.selected = false;
    };

    ParticipantsView.prototype.select = function() {
      return this.selected = true;
    };

    ParticipantsView.prototype.render = function() {
      if (!this.selected) {
        return this;
      }
      jQuery(this.contents).html(this.$el.html(this.template()));
      this.filter.render(this.el);
      this.pagination.render(this.$('div.pagination'));
      return this;
    };

    ParticipantsView.prototype.handleChange = function() {
      var useType;
      useType = this.filter.getEventType(this.eventType);
      this.renderParticipants(this.challengeController.dataForEventType(useType));
      return this.renderAthleteRank(this.challengeController.athleteDataForEventType(useType));
    };

    ParticipantsView.prototype.handleFilterChange = function() {
      return this.handleChange();
    };

    ParticipantsView.prototype.show = function() {
      var useType;
      this.render();
      useType = this.filter.getEventType(this.eventType);
      this.renderParticipants(this.challengeController.dataForEventType(useType));
      return this.renderAthleteRank(this.challengeController.athleteDataForEventType(useType));
    };

    ParticipantsView.prototype.renderLoading = function() {
      if (!this.selected) {
        return this;
      }
      this.$('div.loading-panel').show();
      return this;
    };

    ParticipantsView.prototype.renderAthleteRank = function(athlete) {
      var athleteView;
      if (!this.selected) {
        return this;
      }
      if ((athlete != null) && (athlete.id != null)) {
        athleteView = new Strava.Challenges.LeaderboardRankView({
          model: athlete
        });
        this.$('#athlete-rank').html(athleteView.render().el).show();
      } else {
        this.$('#athlete-rank').hide();
      }
      return this;
    };

    ParticipantsView.prototype.renderParticipants = function(participants) {
      var frag;
      if (!this.selected) {
        return this;
      }
      this.$('#contents').empty();
      frag = document.createDocumentFragment();
      if (participants.length === 0) {
        frag.appendChild(jQuery("<tr><td colspan='10'><div class='centered'><h4 class='empty-results'>" + (Strava.I18n.Locale.t('strava.challenges.participants_view.no_results')) + "</h4></div></td></tr>")[0]);
      } else {
        participants.each((function(_this) {
          return function(participant, index) {
            var participantView;
            participantView = _this.factory(participant);
            participantView.convertor = _this.challengeController.convertor;
            return frag.appendChild(participantView.render().el);
          };
        })(this));
      }
      this.$('#contents').append(frag.cloneNode(true));
      frag = null;
      this.toggleRankColumn();
      return this;
    };

    ParticipantsView.prototype.toggleRankColumn = function() {
      var useType;
      useType = this.filter.getEventType(this.eventType);
      if (useType === 'overallChange') {
        return jQuery('.rank-column').hide();
      } else {
        return jQuery('.rank-column').show();
      }
    };

    return ParticipantsView;

  })(Backbone.View);

  Strava.Challenges.PremiumUpsellView = (function(superClass) {
    extend(PremiumUpsellView, superClass);

    function PremiumUpsellView(challengeController, eventType, contents, filter, pagination, factory) {
      PremiumUpsellView.__super__.constructor.call(this, challengeController, eventType, contents, filter, pagination, factory);
      this.upselltemplate = _.template(jQuery('#premium-upsell-template').html());
    }

    PremiumUpsellView.prototype.render = function() {
      if (!this.selected) {
        return this;
      }
      jQuery(this.contents).html(jQuery(this.el).html(this.template()));
      return this.filter.render(this.el);
    };

    PremiumUpsellView.prototype.renderParticipants = function() {
      var id, text;
      if (!this.selected) {
        return this;
      }
      if (this.eventType === 'ageFilterViewChange') {
        text = 'age group';
        id = '#age-premium';
      } else {
        text = 'weight class';
        id = '#weight-premium';
      }
      this.$('#contents').html(this.upselltemplate({
        data: {
          text: text
        }
      }));
      return this.$('#contents').find(id).show();
    };

    PremiumUpsellView.prototype.renderAthleteRank = function() {
      if (!this.selected) {
        return this;
      }
      return jQuery('#athlete-rank').hide();
    };

    return PremiumUpsellView;

  })(Strava.Challenges.ParticipantsView);

}).call(this);
(function() {
  Strava.module('Strava.Challenges');

  Strava.Challenges.ScrollOnPageChange = (function() {
    function ScrollOnPageChange() {}

    ScrollOnPageChange.prototype.addAdapter = function(adapter) {
      return adapter.bind('fetchCollection', function() {
        return jQuery('document, body').animate({
          scrollTop: jQuery('ul.tabs').offset().top
        });
      });
    };

    return ScrollOnPageChange;

  })();

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['challenges/share/main'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='row'>\n  <div class='col-sm-3 spans3'>\n    <img class='challenge-img' src='" + ($e($c(this.logo_url))) + "' alt='" + ($e($c(this.name))) + "'>\n  </div>\n  <div class='col-sm-6 spans8'>\n    <h4>" + ($e($c(this.name))) + "</h4>\n    <div class='challenge-date mb-md'>" + this.start_date_formatted + " – " + this.end_date_formatted + "</div>\n    <p>" + ($c(this.short_description)) + "</p>\n  </div>\n  <div class='col-sm-3 spans5' id='share-detail-section'></div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['challenges/share/join_main'] = function(context) {
    return (function() {
      var $c, $e, $o, formatter;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      formatter = new Strava.I18n.ScalarFormatter();
      $o.push("<div class='row'>\n  <div class='avatar-container col-xs-3'>\n    <img src='" + ($e($c(this.logo_url))) + "'>\n  </div>\n  <div class='col-xs-9'>\n    <h3 class='h2'>" + ($e($c(Strava.I18n.Locale.t('templates.challenges.join_state', {
        count: this.num_participants,
        fcount: formatter.format(this.num_participants, 0)
      })))) + "</h3>\n    <h4>" + ($e($c(Strava.I18n.Locale.t('templates.challenges.spread_the_word')))) + "</h4>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['challenges/share/detail_started'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='achieved avatar-container'>\n  <img src='" + ($e($c(this.achievement_url))) + "'>\n  <span class='achievement-earned'>" + ($e($c(this.achievement_caption))) + "</span>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges');

  Strava.Challenges.ShareLightboxMainView = (function(superClass) {
    extend(ShareLightboxMainView, superClass);

    ShareLightboxMainView.prototype.events = {
      'focus .copy-link input': 'selectInput',
      'click .copy-link input': 'returnFalse'
    };

    function ShareLightboxMainView(data) {
      ShareLightboxMainView.__super__.constructor.call(this);
      this.data = data;
      this.template = 'challenges/share/main';
      this.innerTemplate = 'challenges/share/detail_started';
    }

    ShareLightboxMainView.prototype.render = function() {
      var jsonData, template;
      jsonData = this.dataAsJSON();
      this.renderTemplate(jsonData);
      if (this.data.get('started') && jsonData.achievement_url && jsonData.achievement_url.length > 0) {
        template = this.getTemplateFor(this.innerTemplate);
        this.$("#share-detail-section").html(template(jsonData));
      }
      this.$('.copy-link input').focus(function() {
        return this.select();
      }).mouseup(function() {
        return false;
      });
      return this;
    };

    ShareLightboxMainView.prototype.selectInput = function(input) {
      return this.$(input).select();
    };

    ShareLightboxMainView.prototype.returnFalse = function() {
      return false;
    };

    ShareLightboxMainView.prototype.dataAsJSON = function() {
      var endDate, formatter, jsonData, now, options, startDate;
      jsonData = this.data.toJSON();
      startDate = new Date(this.data.get('start_date'));
      endDate = new Date(this.data.get('end_date'));
      now = new Date();
      formatter = new Strava.I18n.DateTimeFormatter();
      options = {
        format: 'date',
        type: 'long'
      };
      jsonData.start_date_formatted = this.data.get('start_date_string');
      jsonData.end_date_formatted = this.data.get('end_date_string');
      jsonData.starts_in_days = Math.floor((startDate.getTime() - Date.now()) / 1000 / 60 / 60 / 24);
      jsonData.starts_in_hours = 23 - now.getHours();
      jsonData.starts_in_minutes = 59 - now.getMinutes();
      return jsonData;
    };

    return ShareLightboxMainView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Challenges");

  Strava.Challenges.StravaRaceCollection = (function(superClass) {
    extend(StravaRaceCollection, superClass);

    function StravaRaceCollection() {
      return StravaRaceCollection.__super__.constructor.apply(this, arguments);
    }

    StravaRaceCollection.prototype.model = Strava.Challenges.Challenge;

    StravaRaceCollection.prototype.url = '/races';

    StravaRaceCollection.prototype.fetch = function(options) {
      this.trigger('fetch');
      return StravaRaceCollection.__super__.fetch.call(this, jQuery.extend(true, options, {
        cache: false
      }));
    };

    return StravaRaceCollection;

  })(Backbone.Collection);

}).call(this);
(function() {
  Strava.module("Strava.Challenges");

  Strava.Challenges.ViewFactory = (function() {
    function ViewFactory() {}

    ViewFactory.createParticipantFactory = function(challenge) {
      var template, type;
      type = challenge.get('type');
      template = (function() {
        switch (type) {
          case 'SegmentChallenge':
          case 'SingleActivityChallenge':
          case 'VirtualRaceChallenge':
            return '#challenge-participants-activity-row-template';
          default:
            return void 0;
        }
      })();
      if (challenge.isPaceBased()) {
        return function(model) {
          return new Strava.Challenges.Renderers.PaceParticipantRenderer(model, challenge, template);
        };
      } else {
        return function(model) {
          return new Strava.Challenges.ParticipantView(model, template);
        };
      }
    };

    ViewFactory.createOverallParticipantFactory = function(challengeController, challenge) {
      var template, type;
      type = challenge.get('type');
      template = (function() {
        switch (type) {
          case 'SegmentChallenge':
          case 'SingleActivityChallenge':
          case 'VirtualRaceChallenge':
            return '#challenge-participants-activity-row-template';
          default:
            return void 0;
        }
      })();
      if (challenge.isPaceBased()) {
        return function(model) {
          return new Strava.Challenges.Renderers.OverallPaceParticipantRenderer(model, challenge, challengeController, template);
        };
      } else {
        return function(model) {
          return new Strava.Challenges.OverallParticipantView(model, challengeController, template);
        };
      }
    };

    return ViewFactory;

  })();

}).call(this);
var StravaChallengesPrivacyModal = {
  name: '_strava_challenges_privacy_modal=',
  decodeCookie: function(){
    var decodedCookie = decodeURIComponent(document.cookie);
    return decodedCookie.split(';');
  },
  cookieExists: function(){
    var ca = this.decodeCookie();
    for(var i = 0; i < ca.length; i++){
      var c = ca[i];
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(this.name) == 0) { return true; }
    }
    return false;
  },
  setCookieValue: function(value){
    var date = new Date();
    date.setTime(date.getTime() + (3*60*60*1000));
    var expires = ';expires=' + date.toUTCString();
    document.cookie = '_strava_challenges_privacy_modal=' + value + expires + ';domain=.strava.com;path=/;';
  },
  getCookieValue: function(){
    var ca = this.decodeCookie();
    for(var i = 0; i < ca.length; i++){
      var c = ca[i];
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(this.name) == 0) { return c.substring(this.name.length, c.length); }
    }
  },
  showModal: function(visibility){
    return (window.location.hash == '#joined' &&
        visibility != 'everyone' &&
        this.getCookieValue() != 'true');
  }
};

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges.Renderers');

  Strava.Challenges.Renderers.PaceParticipantRenderer = (function(superClass) {
    extend(PaceParticipantRenderer, superClass);

    Strava.includeModule(PaceParticipantRenderer, Strava.base_module);

    PaceParticipantRenderer.prototype.tagName = 'tr';

    function PaceParticipantRenderer(model, challenge, template) {
      this.challenge = challenge;
      if (template == null) {
        template = '#challenge-participants-row-template';
      }
      PaceParticipantRenderer.__super__.constructor.call(this, {
        model: model
      });
      this.initializeAttributes({
        selector: template
      });
    }

    PaceParticipantRenderer.prototype.render = function() {
      this.create_template(this.selector());
      this.render_template({
        data: this.getModelJSON()
      });
      if (this.model.get('isLeader')) {
        this.$$().addClass('leader');
        this.$$().find('.avatar').removeClass('avatar-sm').addClass('avatar-md');
      }
      return this;
    };

    PaceParticipantRenderer.prototype.getModelJSON = function() {
      var data, scalarFormatter;
      data = this.model.toJSON();
      if (this.challenge.isBestEffortBased()) {
        data.time = this.convertor.formatTime(data.total_dimension);
      } else {
        data.distance = new Strava.I18n.DistanceFormatter(this.convertor.unitSystem).abbreviated(data.activity_data.distance, 1);
        data.time = this.convertor.formatTime(data.activity_data.moving_time);
        data.behind_leader = this.getBehindLeader(data.activity_data.velocity, data.delta_velocity);
      }
      data.pace = this.getPace(data.activity_data.velocity);
      scalarFormatter = new TwitterCldr.DecimalFormatter();
      if (data.rank !== '-') {
        data.rank = scalarFormatter.format(data.rank, {
          precision: 0
        });
      }
      data.overall_rank = scalarFormatter.format(data.overall_rank, {
        precision: 0
      });
      return data;
    };

    PaceParticipantRenderer.prototype.getPace = function(velocity) {
      var formatter, unit;
      if (!((velocity != null) || velocity > 0)) {
        return 0;
      }
      unit = currentAthlete.get('measurement_preference') === 'feet' ? 'imperial' : currentAthlete.get('measurement_preference') === 'meters' ? 'metric' : this.convertor.unitSystem;
      formatter = new Strava.I18n.PaceFormatter(unit);
      return formatter.formatShort(velocity);
    };

    PaceParticipantRenderer.prototype.getBehindLeader = function(velocity, deltaVelocity) {
      var deltaPace, formatter, leaderPace, leaderVelocity, pace;
      if (velocity == null) {
        return this.convertor.formatTime(0);
      }
      if (deltaVelocity == null) {
        return this.convertor.formatTime(0);
      }
      leaderVelocity = velocity + deltaVelocity;
      if (leaderVelocity === 0) {
        return this.convertor.formatTime(0);
      }
      formatter = new Strava.I18n.PaceFormatter(this.convertor.unitSystem);
      leaderPace = formatter.convert(leaderVelocity);
      pace = formatter.convert(velocity);
      deltaPace = Math.abs(pace - leaderPace);
      return this.convertor.formatTime(deltaPace);
    };

    return PaceParticipantRenderer;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Challenges.Renderers');

  Strava.Challenges.Renderers.OverallPaceParticipantRenderer = (function(superClass) {
    extend(OverallPaceParticipantRenderer, superClass);

    function OverallPaceParticipantRenderer(model, challenge, controller, template) {
      this.controller = controller;
      OverallPaceParticipantRenderer.__super__.constructor.call(this, model, challenge, template);
    }

    OverallPaceParticipantRenderer.prototype.render = function() {
      OverallPaceParticipantRenderer.__super__.render.call(this);
      if (this.controller.filter.type() === 'AllFilter') {
        this.$('td').first().removeClass('overall');
        if (this.model.get('isLeader')) {
          this.$$().find('.leader-prompt').show();
        }
      }
      return this;
    };

    return OverallPaceParticipantRenderer;

  })(Strava.Challenges.Renderers.PaceParticipantRenderer);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Ui");

  Strava.Ui.TabController = (function(superClass) {
    extend(TabController, superClass);

    function TabController(tabs, tabSelector, contentSelector) {
      if (tabSelector == null) {
        tabSelector = 'ul.tabs';
      }
      if (contentSelector == null) {
        contentSelector = '#tab-contents';
      }
      this.el = tabSelector;
      this.tabs = tabs || [];
      this.contentSelector = contentSelector;
      this.bindToTabs();
      TabController.__super__.constructor.call(this);
      this.tabClickHandler(function(controller, tab) {
        if (!tab.renderer.selected) {
          return controller.showTab(tab);
        }
      });
    }

    TabController.prototype.render = function() {
      var selectedTab;
      selectedTab = _.find(this.tabs, function(tab) {
        return tab.selected;
      });
      return this.showTab(selectedTab);
    };

    TabController.prototype.unselectTabs = function() {
      var i, len, ref, results, tab;
      ref = this.tabs;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tab = ref[i];
        tab.renderer.unselect();
        results.push(this.$(tab.selector).removeClass('selected'));
      }
      return results;
    };

    TabController.prototype.selectTab = function(tab) {
      tab.renderer.select();
      tab.renderer.render(this.contentSelector);
      tab.renderer.show();
      return this.$(tab.selector).addClass('selected');
    };

    TabController.prototype.showTab = function(tab) {
      this.unselectTabs();
      return this.selectTab(tab);
    };

    TabController.prototype.tabClickHandler = function(handler) {
      return this.setOrGet('_tabClickHandler', handler);
    };

    TabController.prototype.addTab = function(selector, renderer, selected) {
      var d;
      if (selected == null) {
        selected = false;
      }
      d = {
        selector: selector,
        renderer: renderer,
        selected: selected
      };
      this.tabs.push(d);
      renderer.on('close', (function(_this) {
        return function() {
          return _this.trigger('close');
        };
      })(this));
      renderer.on('actionSuccess', (function(_this) {
        return function(args) {
          return _this.trigger('actionSuccess', args);
        };
      })(this));
      renderer.on('actionError', (function(_this) {
        return function(args) {
          return _this.trigger('actionError', args);
        };
      })(this));
      return this.$(selector).on('click', (function(_this) {
        return function() {
          return _this.tabClickHandler()(_this, d);
        };
      })(this));
    };

    TabController.prototype.bindToTabs = function() {
      return jQuery.each(this.tabs, (function(_this) {
        return function(index, tab) {
          return jQuery(tab.selector).bind('click', function(eventData) {
            return _this.tabClickHandler()(_this, tab);
          });
        };
      })(this));
    };

    return TabController;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Ui");

  Strava.Ui.PagingController = (function(superClass) {
    extend(PagingController, superClass);

    function PagingController(paging_adapter) {
      this.page = 1;
      this.items_per_page = 10;
      this.total_items = 0;
      this.paging_adapter = paging_adapter;
      this.paging_adapter.bind('fetch', (function(_this) {
        return function() {
          return _this.trigger('fetch');
        };
      })(this));
      this.paging_adapter.bind('reset', (function(_this) {
        return function() {
          return _this.handleReset();
        };
      })(this));
      PagingController.__super__.constructor.call(this);
    }

    PagingController.prototype.handleReset = function() {
      this.page = this.paging_adapter.get("page");
      this.total_items = this.paging_adapter.get("total");
      this.items_per_page = this.paging_adapter.get("perPage");
      return this.trigger('reset');
    };

    PagingController.prototype.hasNext = function() {
      if (this.pageInfo().next === false) {
        return false;
      }
      return true;
    };

    PagingController.prototype.hasPrevious = function() {
      if (this.pageInfo().prev === false) {
        return false;
      }
      return true;
    };

    PagingController.prototype.nextPage = function() {
      if (!this.hasNext()) {
        return;
      }
      this.page = this.page + 1;
      return this.paging_adapter.fetch(this.buildOptions());
    };

    PagingController.prototype.buildOptions = function() {
      return {
        data: {
          page: this.page,
          per_page: this.items_per_page
        }
      };
    };

    PagingController.prototype.previousPage = function() {
      if (!this.hasPrevious()) {
        return;
      }
      this.page = this.page - 1;
      return this.paging_adapter.fetch(this.buildOptions());
    };

    PagingController.prototype.pageInfo = function() {
      var info, max;
      info = {
        total: this.total_items,
        page: this.page,
        perPage: this.items_per_page,
        pages: Math.ceil(this.total_items / this.items_per_page),
        prev: false,
        next: false
      };
      max = Math.min(this.total_items, this.page * this.items_per_page);
      if (this.total_items === this.pages * this.per_items_page) {
        max = this.total_items;
      }
      info.range = [(this.page - 1) * this.items_per_page + 1, max];
      if (this.page > 1) {
        info.prev = this.page - 1;
      }
      if (this.page < info.pages) {
        info.next = this.page + 1;
      }
      return info;
    };

    return PagingController;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Ui");

  Strava.Ui.NOPPaginatedView = (function() {
    function NOPPaginatedView() {}

    NOPPaginatedView.prototype.render = function(contents) {};

    return NOPPaginatedView;

  })();

  Strava.Ui.PaginatedView = (function(superClass) {
    extend(PaginatedView, superClass);

    function PaginatedView(selectors, pagingController, options) {

      /*
       * selectors:
       *   {
       *     previous: <DOM element selector to listen on for click event>
       *     next: <DOM element selector to listen on for click event>
       *     template: <DOM element selector for template root>
       *   }
       */
      this.events = {};
      this.events["click " + selectors.previous] = "handlePrevious";
      this.events["click " + selectors.next] = "handleNext";
      this.templateSelectors = selectors.template;
      this.pagingController = pagingController;
      this.discussionBoardAccess = false;
      PaginatedView.__super__.constructor.call(this, options);
    }

    PaginatedView.prototype.initialize = function() {
      this.createTemplate(this.templateSelectors);
      return this.pagingController.bind('reset', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    };

    PaginatedView.prototype.render = function(target) {
      if (target) {
        this.setElement(target);
      }
      this.renderTemplate(this.pagingController.pageInfo());
      return this;
    };

    PaginatedView.prototype.handlePrevious = function() {
      this.pagingController.previousPage();
      return false;
    };

    PaginatedView.prototype.handleNext = function() {
      this.pagingController.nextPage();
      return false;
    };

    return PaginatedView;

  })(Backbone.View);

}).call(this);



(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.Author = (function(superClass) {
    extend(Author, superClass);

    function Author(attributes) {
      Author.__super__.constructor.apply(this, arguments);
    }

    return Author;

  })(Backbone.Model);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['partials/current_athlete_avatar'] = function(context) {
    return (function() {
      var $c, $e, $o, badge_class, size;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      size = this.size || 'lg';
      if (this.size === 'sm' || this.size === 'default') {
        badge_class = 'tiny';
      }
      $o.push("<a class='" + (['avatar', 'avatar-athlete', 'track-click', "avatar-" + ($e($c(size)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' href='/athletes/" + ($e($c(this.athlete.id))) + "' title='" + ($e($c(this.athlete.display_name))) + "' data-tracking-element='athlete' data-athlete-id='" + ($e($c(this.athlete.id))) + "'>");
      if (this.athlete.member_type) {
        $o.push("  <div class='" + (['badge', ($e($c(this.athlete.member_type))) + " " + ($e($c(badge_class)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' title='" + ($e($c(Strava.I18n.Locale.t("templates.athletes.member_types." + this.athlete.member_type)))) + "'></div>");
      }
      $o.push("  <img src='" + ($e($c(this.athlete.photo))) + "' alt='" + ($e($c(this.athlete.display_name))) + "'>\n</a>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['partials/athlete_avatar'] = function(context) {
    return (function() {
      var $c, $e, $o, badge_class, size;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      size = this.size || 'sm';
      if (this.size === 'sm' || this.size === 'default') {
        badge_class = 'tiny';
      }
      $o.push("<a class='" + (['avatar', 'avatar-athlete', 'str-click-avatar-js', "avatar-" + ($e($c(size)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' href='/athletes/" + ($e($c(this.athlete.id))) + "'>");
      if (this.athlete.member_type) {
        $o.push("  <div class='" + (['badge', ($e($c(this.athlete.member_type))) + " " + ($e($c(badge_class)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' title='" + ($e($c(Strava.I18n.Locale.t("templates.athletes.member_types." + this.athlete.member_type)))) + "'></div>");
      }
      $o.push("  <img src='" + ($e($c(this.athlete.avatar))) + "' alt='" + ($e($c(this.athlete.name))) + "'>\n</a>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.AvatarView = (function(superClass) {
    extend(AvatarView, superClass);

    function AvatarView() {
      return AvatarView.__super__.constructor.apply(this, arguments);
    }

    AvatarView.prototype.currentAthleteAvatarHtml = function() {
      var template;
      template = this.getTemplateFor('partials/current_athlete_avatar');
      return template({
        athlete: currentAthlete.toJSON(),
        size: 'md'
      });
    };

    AvatarView.prototype.athleteAvatarHtml = function(athlete) {
      var template;
      template = this.getTemplateFor('partials/athlete_avatar');
      return template({
        athlete: athlete,
        size: 'md'
      });
    };

    AvatarView.prototype.clubAvatarHtml = function() {
      var template;
      template = this.createTemplateFor('#club-avatar-template');
      return template({});
    };

    return AvatarView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.Comment = (function(superClass) {
    extend(Comment, superClass);

    function Comment(attributes) {
      var actual_attributes;
      actual_attributes = this.parseAttributes(attributes);
      if (!actual_attributes.id) {
        actual_attributes.comment = {
          comment: attributes.text
        };
      }
      Comment.__super__.constructor.call(this, actual_attributes);
    }

    Comment.prototype.parse = function(response, xhr) {
      var actual_attributes;
      actual_attributes = this.parseAttributes(response);
      return Comment.__super__.parse.call(this, actual_attributes, xhr);
    };

    Comment.prototype.parseAttributes = function(attributes) {
      this.author = new Strava.Discussions.Author();
      this.author.set(attributes.author, {
        silent: true
      });
      return {
        id: attributes.id,
        text: attributes.text,
        tokenized_text: attributes.tokenized_text,
        ts: attributes.ts,
        deletable: attributes.deletable,
        reportable: attributes.reportable,
        quarantinable: attributes.quarantinable
      };
    };

    Comment.prototype.isDeletable = function() {
      return (this.get('deletable') != null) && this.get('deletable');
    };

    Comment.prototype.isReportable = function() {
      return (this.get('reportable') != null) && this.get('reportable');
    };

    Comment.prototype.isQuarantinable = function() {
      return (this.get('quaratinable') != null) && this.get('quarantinablee');
    };

    Comment.prototype.save = function(attrs, options) {
      var post_id;
      post_id = options.post_id;
      this.url = "/posts/" + post_id + "/comments";
      return Comment.__super__.save.call(this, attrs, options);
    };

    Comment.prototype.destroy = function(options) {
      var post_id;
      post_id = options.post_id;
      this.url = "/posts/" + post_id + "/comments/" + this.id;
      return Comment.__super__.destroy.call(this, options);
    };

    Comment.prototype.toJSON = function() {
      var formatter, json, text_template, time_ago;
      json = Comment.__super__.toJSON.call(this);
      json.author = this.author.toJSON();
      time_ago = new TwitterCldr.TimespanFormatter().format(json.ts - Math.round(Date.now() / 1000));
      text_template = _.template('{{text}}', {
        text: json.text
      });
      formatter = Strava.Util.I18n.stringFormatter(text_template);
      if (currentAthlete.isLoggedIn()) {
        formatter = formatter.linkify(50);
      }
      json.text_formatted = formatter.nl2br().end();
      json.time_ago = time_ago;
      return json;
    };

    Comment.fromCreatedCommentObject = function(comment) {
      var tokenized_text;
      tokenized_text = comment.comment[0].hasOwnProperty('tokenized_text') ? comment.comment[0].tokenized_text : comment.comment;
      return new Strava.Discussions.Comment({
        id: comment.comment_id,
        text: comment.comment[0].text,
        tokenized_text: tokenized_text,
        ts: Math.round(Date.now() / 1000) - 1,
        deletable: comment.deletable,
        reportable: comment.reportable,
        quarantinable: comment.quarantinable,
        author: {
          id: comment.athlete.id,
          member_type: comment.athlete.member_type,
          avatar: comment.athlete.avatar_url,
          name: comment.athlete.name
        }
      });
    };

    return Comment;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.CommentBoardView = (function(superClass) {
    extend(CommentBoardView, superClass);

    CommentBoardView.prototype.el = '#comment-board-js';

    CommentBoardView.prototype.events = {
      'submit form': 'saveComment',
      'click .delete-comment-js': 'deleteComment',
      'click .delete-post-js': 'deletePost',
      'keyup textarea': 'applyTextareaClass',
      'blur textarea': 'applyTextareaClass'
    };

    function CommentBoardView(controller, post, redirectUrl) {
      this.controller = controller;
      this.post = post;
      this.controller.posts.push(this.post);
      this.controller.bind('postCommentAddChange', (function(_this) {
        return function() {
          return _this.renderComment();
        };
      })(this)).bind('postCommentDeleteChange', (function(_this) {
        return function(postId, commentId) {
          return _this.$("li[data-comment-id='" + commentId + "']").remove();
        };
      })(this)).bind('postDeleteChange', (function(_this) {
        return function() {
          return window.location = redirectUrl;
        };
      })(this));
      CommentBoardView.__super__.constructor.call(this);
    }

    CommentBoardView.prototype.saveComment = function() {
      var text;
      text = jQuery.trim(this.$('textarea').val());
      if (!text.length) {
        return false;
      }
      this.controller.createComment(this.post.get('id'), text);
      return false;
    };

    CommentBoardView.prototype.deleteComment = function(e) {
      var $parent, commentId;
      if (!confirm(Strava.I18n.Locale.t('strava.discussions.comment_board_view.delete_comment'))) {
        return;
      }
      $parent = jQuery(e.target).closest('li');
      commentId = $parent.data('comment-id');
      return this.controller.deleteComment(this.post.get('id'), commentId);
    };

    CommentBoardView.prototype.deletePost = function() {
      if (!confirm(Strava.I18n.Locale.t('strava.discussions.comment_board_view.delete_comment'))) {
        return;
      }
      return this.controller.deletePost(this.post.get('id'));
    };

    CommentBoardView.prototype.renderComment = function() {
      var comment;
      comment = new Strava.Discussions.CommentBoardCommentView(this.post.comments.last());
      this.$('ul').append(comment.render().el);
      return this.$('textarea').val('');
    };

    CommentBoardView.prototype.applyTextareaClass = function(e) {
      var textarea;
      textarea = this.$('textarea');
      if (textarea.val().length > 0) {
        return textarea.addClass('expanded');
      } else {
        return textarea.removeClass('expanded');
      }
    };

    return CommentBoardView;

  })(Backbone.View);

  Strava.Discussions.CommentBoardCommentView = (function(superClass) {
    extend(CommentBoardCommentView, superClass);

    CommentBoardCommentView.prototype.tagName = 'li';

    function CommentBoardCommentView(comment1) {
      this.comment = comment1;
      this.createTemplate('#comment-view-js');
      CommentBoardCommentView.__super__.constructor.call(this);
    }

    CommentBoardCommentView.prototype.render = function() {
      var d, data, date, formatter, time;
      data = this.comment.toJSON();
      d = new Date(data.ts * 1000);
      formatter = new Strava.I18n.DateTimeFormatter();
      time = formatter.format(d, {
        "format": "time",
        "type": "short"
      });
      date = formatter.format(d, {
        "format": "date",
        "type": "medium"
      });
      this.renderTemplate(jQuery.extend(data, {
        time: time,
        date: date
      }));
      this.$el.attr('data-comment-id', data.id);
      return this;
    };

    return CommentBoardCommentView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.CommentCollection = (function(superClass) {
    extend(CommentCollection, superClass);

    function CommentCollection() {
      return CommentCollection.__super__.constructor.apply(this, arguments);
    }

    CommentCollection.prototype.model = Strava.Discussions.Comment;

    return CommentCollection;

  })(Backbone.Collection);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Discussions');

  Strava.Discussions.DiscussionBadgeController = (function(superClass) {
    extend(DiscussionBadgeController, superClass);

    function DiscussionBadgeController(parent) {
      this.parent = parent;
      DiscussionBadgeController.__super__.constructor.call(this);
    }

    DiscussionBadgeController.prototype.postSinceKey = function() {
      return "strava.discussions." + this.parent.className + "." + (this.parent.get('id')) + ".postCountSince";
    };

    DiscussionBadgeController.prototype.url = function() {
      return "/" + this.parent.tabelized + "/" + (this.parent.get('id')) + "/posts/count_since";
    };

    DiscussionBadgeController.prototype.getCountSince = function() {
      if (!Modernizr.localstorage) {
        return;
      }
      if (!this.lastVisitTimestamp()) {
        this.setLastVisitTimestamp(0);
      }
      return this.fetch({
        url: this.url(),
        type: 'GET',
        contentType: 'application/json',
        data: {
          timestamp: this.lastVisitTimestamp()
        },
        success: (function(_this) {
          return function(model, response) {
            return _this.trigger('countSinceFetched', response['count']);
          };
        })(this)
      });
    };

    DiscussionBadgeController.prototype.lastVisitTimestamp = function() {
      return localStorage.getItem(this.postSinceKey());
    };

    DiscussionBadgeController.prototype.setLastVisitTimestampToNow = function() {
      var now;
      now = Math.round(Date.now() / 1000);
      return this.setLastVisitTimestamp(now);
    };

    DiscussionBadgeController.prototype.setLastVisitTimestamp = function(ts) {
      return localStorage.setItem(this.postSinceKey(), ts);
    };

    DiscussionBadgeController.prototype.clearLastTimestamp = function() {
      return localStorage.removeItem(this.postSinceKey());
    };

    return DiscussionBadgeController;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.DiscussionBadgeView = (function(superClass) {
    extend(DiscussionBadgeView, superClass);

    function DiscussionBadgeView(context, element) {
      DiscussionBadgeView.__super__.constructor.call(this);
      this.setElement(element);
      this.context = context;
      this.context.on('countSinceFetched', (function(_this) {
        return function(count) {
          return _this.renderCount(count);
        };
      })(this));
    }

    DiscussionBadgeView.prototype.renderCount = function(count) {
      if (!(count > 0)) {
        return;
      }
      return this.$('.new-discussion-count').html(Strava.I18n.Locale.t('strava.discussions.badge_view.new_count', {
        count: count
      }));
    };

    return DiscussionBadgeView;

  })(Backbone.View);

}).call(this);
(function() {
  Strava.module('Strava.Lib');

  Strava.Lib.EntityMap = (function() {
    function EntityMap() {}

    EntityMap.entity_map = {
      Activity: 'activity',
      AthleteFeedEntry: 'athlete-feed-entry',
      Post: 'post'
    };

    EntityMap.getUrl = function(entity, id, action) {
      return "/feed/" + this.entity_map[entity] + "/" + id + "/" + action;
    };

    return EntityMap;

  })();

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Lib');

  Strava.Lib.KudosController = (function(superClass) {
    extend(KudosController, superClass);

    function KudosController() {
      return KudosController.__super__.constructor.apply(this, arguments);
    }

    KudosController.prototype.kudo = function(entity, id) {
      return this.save(null, {
        url: Strava.Lib.EntityMap.getUrl(entity, id, 'kudo'),
        contentType: 'application/json',
        type: 'POST',
        success: (function(_this) {
          return function(model, resp) {
            return _this.dispatchKudosCreate(entity, id);
          };
        })(this)
      });
    };

    KudosController.prototype.dispatchKudosCreate = function(entity, id) {
      return this.trigger('kudoCreated', entity, id);
    };

    KudosController.prototype.fetchKudos = function(entity, id, success, error) {
      return this.fetch({
        url: Strava.Lib.EntityMap.getUrl(entity, id, 'kudos'),
        success: function(model, resp) {
          return success(resp.athletes, resp.kudosable, resp.isOwner);
        },
        error: function(model, resp) {
          return error('');
        }
      });
    };

    KudosController.prototype.parse = function(resp) {
      return {
        id: 1
      };
    };

    return KudosController;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Lib');

  Strava.Lib.SocialController = (function(superClass) {
    extend(SocialController, superClass);

    function SocialController() {
      this.hash = {};
      SocialController.__super__.constructor.call(this);
    }

    SocialController.prototype.addToHash = function(key, things) {
      if (!things.length) {
        things = [];
      }
      return this.hash[key] = things;
    };

    SocialController.prototype.addToKey = function(key, thing) {
      if (this.hash[key] == null) {
        this.hash[key] = [];
      }
      return this.hash[key].push(thing);
    };

    SocialController.prototype.setHash = function(hash) {
      if (hash === '') {
        return;
      }
      return this.hash = hash;
    };

    SocialController.prototype.getFromHash = function(key) {
      return this.hash[key] || [];
    };

    SocialController.prototype.existsInHash = function(key) {
      return this.hash[key] != null;
    };

    return SocialController;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Lib');

  Strava.Lib.CommentsController = (function(superClass) {
    extend(CommentsController, superClass);

    function CommentsController() {
      return CommentsController.__super__.constructor.apply(this, arguments);
    }

    CommentsController.prototype.initialize = function() {
      this.commentable = true;
      return jQuery(document).bind('commentCreatedFromReact', (function(_this) {
        return function(ev) {
          var data, entity_key, resp;
          data = ev.originalEvent.detail;
          resp = data.response;
          entity_key = data.entity + '-' + data.entityId;
          _this.addToKey(entity_key, resp);
          _this.dispatchCommentCreate(resp, entity_key);
          return _this.dispatchCommentCompleted(entity_key);
        };
      })(this));
    };

    CommentsController.prototype.comment = function(entity, id, text) {
      var data, entity_key;
      data = {
        comment: text
      };
      entity_key = entity + '-' + id;
      return this.save(null, {
        url: Strava.Lib.EntityMap.getUrl(entity, id, 'comment'),
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json',
        success: (function(_this) {
          return function(model, resp) {
            _this.addToKey(entity_key, resp);
            return _this.dispatchCommentCreate(resp, entity_key);
          };
        })(this),
        complete: (function(_this) {
          return function() {
            return _this.dispatchCommentCompleted(entity_key);
          };
        })(this)
      });
    };

    CommentsController.prototype.dispatchCommentCreate = function(resp, entity_key) {
      return this.trigger('commentCreated', resp, entity_key);
    };

    CommentsController.prototype.dispatchCommentCompleted = function(entity_key) {
      return this.trigger('commentCompleted', entity_key);
    };

    CommentsController.prototype.dispatchCommentDelete = function(key, resp) {
      return this.trigger('commentDeleted', key, resp);
    };

    CommentsController.prototype.dispatchCommentsReturned = function(resp) {
      return this.trigger('commentsReturned', resp);
    };

    CommentsController.prototype.deleteComment = function(key, id) {
      return this.fetch({
        url: "/feed/comment",
        type: 'DELETE',
        data: JSON.stringify({
          id: id
        }),
        contentType: 'application/json',
        success: (function(_this) {
          return function(model, resp) {
            _this.removeCommentFromHash(key, id);
            return _this.dispatchCommentDelete(key, resp);
          };
        })(this)
      });
    };

    CommentsController.prototype.parse = function(resp) {
      return {
        id: 1
      };
    };

    CommentsController.prototype.removeCommentFromHash = function(key, id) {
      var comment, comments, i, j, len, results;
      comments = this.getFromHash(key);
      results = [];
      for (i = j = 0, len = comments.length; j < len; i = ++j) {
        comment = comments[i];
        if (comment.comment_id === id) {
          comments.splice(i, 1);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CommentsController.prototype.fetchComments = function(entity, id, success, error) {
      var key;
      key = entity + "-" + id;
      if (this.existsInHash(key)) {
        success(this.getFromHash(key));
        return;
      }
      return this.fetch({
        url: Strava.Lib.EntityMap.getUrl(entity, id, 'comments'),
        success: (function(_this) {
          return function(model, resp) {
            var comments;
            comments = resp.comments;
            _this.addToHash(key, comments);
            return success(comments);
          };
        })(this),
        error: function(model, resp) {
          if (error != null) {
            return error(resp);
          }
        }
      });
    };

    CommentsController.prototype.forceFetchComments = function(entity, id) {
      var key;
      key = entity + "-" + id;
      return this.fetch({
        url: Strava.Lib.EntityMap.getUrl(entity, id, 'comments'),
        success: (function(_this) {
          return function(model, resp) {
            return _this.addToHash(key, resp.comments);
          };
        })(this)
      });
    };

    return CommentsController;

  })(Strava.Lib.SocialController);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Discussions');

  Strava.Discussions.DiscussionContext = (function(superClass) {
    var attributes;

    extend(DiscussionContext, superClass);

    attributes = {
      commentsController: null,
      currentAthlete: null,
      discussionController: null,
      discussionPaginatedView: null,
      discussionPagingController: null,
      discussionView: null,
      kudosController: null,
      parent: null,
      postCollectionAdapter: null
    };

    function DiscussionContext(parent, currentAthlete, selector, options) {
      var controller;
      DiscussionContext.__super__.constructor.call(this);
      this.initializeAttributes(attributes);
      this.hasDiscussionLoaded = false;
      this.parent(parent);
      this.currentAthlete(currentAthlete);
      controller = new Strava.Discussions.DiscussionController(parent);
      this.discussionController(controller);
      this.commentsController(new Strava.Lib.CommentsController());
      this.kudosController(new Strava.Lib.KudosController());
      this.postCollectionAdapter(new Strava.Discussions.PostCollectionAdapter(controller));
      this.discussionPagingController(new Strava.Discussions.SeeMoreController(this.postCollectionAdapter()));
      this.discussionPaginatedView(new Strava.Discussions.MorePostsView(this.discussionPagingController()));
      this.discussionView(new Strava.Discussions.DiscussionView(controller, selector, this.discussionPaginatedView(), options, this.kudosController(), this.commentsController()));
      this.discussionController().on('dataChange', (function(_this) {
        return function() {
          _this.discussionView().select();
          return _this.discussionView().show();
        };
      })(this));
      this.discussionController().on('postChange', (function(_this) {
        return function() {
          if (!_this.hasDiscussionLoaded) {
            return _this.hasDiscussionLoaded = true;
          } else {
            return _this.trigger('pageChange');
          }
        };
      })(this));
    }

    DiscussionContext.prototype.assemble = function() {
      return this.discussionController().fetch({
        data: {
          per_page: this.discussionPagingController().items_per_page
        },
        success: (function(_this) {
          return function(response) {
            return _this.discussionPagingController().paging_adapter.handleSuccess(response);
          };
        })(this)
      });
    };

    return DiscussionContext;

  })(Strava.Base);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.DiscussionControllerNOP = (function(superClass) {
    extend(DiscussionControllerNOP, superClass);

    function DiscussionControllerNOP() {
      return DiscussionControllerNOP.__super__.constructor.apply(this, arguments);
    }

    DiscussionControllerNOP.prototype.fetch = function(options) {};

    return DiscussionControllerNOP;

  })(Backbone.Model);

  Strava.Discussions.DiscussionController = (function(superClass) {
    extend(DiscussionController, superClass);

    function DiscussionController(parent) {
      this.parent = parent;
      this.posts = new Strava.Discussions.PostCollection([], {
        parent: this.parent
      });
      this.posts.bind('reset', (function(_this) {
        return function() {
          return _this.dispatchPostChange();
        };
      })(this));
      this.posts.bind('add', (function(_this) {
        return function() {
          return _this.dispatchPostAddChange();
        };
      })(this));
      DiscussionController.__super__.constructor.call(this);
    }

    DiscussionController.prototype.url = function() {
      return "/" + this.parent.tabelized + "/" + this.parent.id + "/posts";
    };

    DiscussionController.prototype.dispatchPostChange = function() {
      return this.trigger('postChange');
    };

    DiscussionController.prototype.dispatchPostAddChange = function() {
      return this.trigger('postAddChange');
    };

    DiscussionController.prototype.dispatchPostCommentAddChange = function(post_id) {
      return this.trigger('postCommentAddChange', post_id);
    };

    DiscussionController.prototype.dispatchPostCommentDeleteChange = function(post_id, comment_id) {
      return this.trigger('postCommentDeleteChange', post_id, comment_id);
    };

    DiscussionController.prototype.dispatchPostDeleteChange = function(post_id) {
      return this.trigger('postDeleteChange', post_id);
    };

    DiscussionController.prototype.dispatchChange = function(changeData) {
      return this.trigger('dataChange', changeData);
    };

    DiscussionController.prototype.fetch = function(options) {
      var chained_success;
      this.trigger('fetch');
      chained_success = options ? options.success : null;
      return DiscussionController.__super__.fetch.call(this, jQuery().extend(true, options, {
        success: (function(_this) {
          return function(model, response) {
            var startIndex;
            startIndex = _this.posts.length;
            _this.posts.add(response.posts, {
              silent: true
            });
            if (chained_success) {
              chained_success(response);
            }
            return _this.dispatchChange({
              startIndex: startIndex
            });
          };
        })(this)
      }));
    };

    DiscussionController.prototype.parse = function(response, xhr) {
      return {
        id: response.id
      };
    };

    DiscussionController.prototype.createPost = function(title, text) {
      var post;
      post = new Strava.Discussions.Post({
        title: title,
        text: text,
        parent_id: this.parent.id,
        parent_type: this.parent.className
      }, {
        parent: this.parent
      });
      return post.save(null, {
        success: (function(_this) {
          return function(model, response, xhr) {
            return _this.createPostSuccess(post);
          };
        })(this)
      });
    };

    DiscussionController.prototype.deletePost = function(post_id) {
      var post;
      post = this.posts.find(function(a_post) {
        return a_post.id === post_id;
      });
      return post.destroy({
        success: (function(_this) {
          return function(model, response, xhr) {
            return _this.deletePostSuccess(post_id);
          };
        })(this)
      });
    };

    DiscussionController.prototype.deletePostSuccess = function(post_id) {
      return this.dispatchPostDeleteChange(post_id);
    };

    DiscussionController.prototype.createPostSuccess = function(post) {
      return this.posts.add(post, {
        at: 0
      });
    };

    DiscussionController.prototype.createComment = function(post_id, text) {
      var comment;
      comment = new Strava.Discussions.Comment({
        text: text
      });
      return comment.save(null, {
        post_id: post_id,
        success: (function(_this) {
          return function(model, response, xhr) {
            return _this.createCommentSuccess(post_id, comment);
          };
        })(this)
      });
    };

    DiscussionController.prototype.deleteComment = function(post_id, comment_id) {
      var comment, post;
      Strava.ExternalAnalytics.trackV2({
        category: this.parent.tabelized,
        page: 'comment',
        action: 'click',
        element: 'confirm_delete',
        properties: this.analyticsProperties(post_id, comment_id)
      });
      Strava.ExternalAnalytics.trackV2({
        category: this.parent.tabelized,
        page: 'comment',
        action: 'click',
        element: 'delete',
        properties: this.analyticsProperties(post_id, comment_id)
      });
      post = this.posts.find(function(a_post) {
        return a_post.id === post_id;
      });
      comment = post.comments.find(function(a_comment) {
        return a_comment.id === comment_id;
      });
      return comment.destroy({
        post_id: post_id,
        success: (function(_this) {
          return function(model, response, xhr) {
            return _this.deleteCommentSuccess(post_id, comment_id);
          };
        })(this)
      });
    };

    DiscussionController.prototype.deleteCommentSuccess = function(post_id, comment_id) {
      return this.dispatchPostCommentDeleteChange(post_id, comment_id);
    };

    DiscussionController.prototype.createCommentSuccess = function(post_id, comment) {
      var post;
      post = this.posts.find(function(a_post) {
        return a_post.id === post_id;
      });
      post.comments.add(comment);
      return this.dispatchPostCommentAddChange(post_id);
    };

    DiscussionController.prototype.reportComment = function(post_id, comment_id) {
      event.preventDefault();
      Strava.ExternalAnalytics.trackV2({
        category: this.parent.tabelized,
        page: 'comment',
        action: 'click',
        element: 'report',
        properties: this.analyticsProperties(post_id, comment_id)
      });
      return window.location = jQuery(event.target).attr('href');
    };

    DiscussionController.prototype.analyticsProperties = function(post_id, comment_id) {
      var result;
      result = {
        post_id: post_id,
        comment_id: comment_id
      };
      switch (this.parent.className) {
        case 'Challenge':
          result.challenge_id = this.parent.id;
          break;
        case 'Athlete':
          result.athlete_id = this.parent.id;
          break;
        case 'GroupEvent':
          result.event_id = this.parent.id;
          break;
        case 'Club':
          result.club_id = this.parent.id;
      }
      return result;
    };

    return DiscussionController;

  })(Backbone.Model);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/discussion'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='tab-content-header'>");
      if (this.showCreatePost && this.allowToPost) {
        if (this.newPostPath) {
          $o.push("  <a class='button right' id='new-post' href='" + ($e($c(this.newPostPath))) + "'>" + ($e($c(Strava.I18n.Locale.t('templates.discussions.discussion.create_a_post')))) + "</a>");
        } else {
          $o.push("  <button class='right' id='show-post-fields'>" + ($e($c(Strava.I18n.Locale.t('templates.discussions.discussion.create_a_post')))) + "</button>");
        }
      }
      $o.push("  <h2 class='topless'>" + ($e($c(Strava.I18n.Locale.t("templates.discussions.discussion.heading_v3." + this.parentType)))) + "</h2>\n</div>");
      if (currentAthlete.get('logged_in') && this.allowToPost) {
        $o.push("<div id='post-block' style='display: none'>\n  <form>\n    <fieldset>\n      <div class='post-author'></div>");
        if (this.showTitle) {
          $o.push("      <input placeholder='" + ($e($c(Strava.I18n.Locale.t('templates.discussions.discussion.prompt.title')))) + "' type='text' name='title'>\n      <br>\n      <br>");
        }
        $o.push("      <textarea placeholder='" + ($e($c(Strava.I18n.Locale.t("templates.discussions.discussion.prompt." + this.parentType)))) + "'></textarea>\n      <button id='create-post' disabled='true' style='display: none'>");
        $o.push("        " + $e($c(Strava.I18n.Locale.t('templates.discussions.discussion.create_post'))));
        $o.push("      </button>\n    </fieldset>\n  </form>\n</div>");
      }
      $o.push("<p class='centered hidden inset no-discussions'>");
      if (this.allowToPost) {
        if (this.newPostPath) {
          $o.push("  " + $c(Strava.I18n.Locale.t('templates.discussions.discussion.start_discussion_v2_html', {
            new_post_path: this.newPostPath
          })));
        } else {
          $o.push("  <span class='inline-post'>" + ($c(Strava.I18n.Locale.t('templates.discussions.discussion.start_discussion_v2_html', {
            new_post_path: 'javascript:;'
          }))) + "</span>");
        }
      } else if (this.postsAdminsOnly) {
        $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.discussions.discussion.no_posts_yet'))));
      } else if (this.clubUrl != null) {
        $o.push("  " + $c(Strava.I18n.Locale.t('templates.discussions.discussion.join_and_start_discussion_v2_html', {
          url: this.clubUrl
        })));
      } else {
        $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.discussions.discussion.join_and_start_discussion_v2'))));
      }
      $o.push("</p>\n<ol class='topics' id='discussion-topics'></ol>\n<div class='pagination simple'></div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/lightbox'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<header class='modal-header'>\n  <div class='avatar avatar-athlete avatar-sm mr-sm pull-left'>\n    <img class='avatar-img' src='" + ($e($c(this.data.athlete_avatar))) + "' alt='" + ($e($c(this.data.athlete_name))) + "' title='" + ($e($c(this.data.athlete_name))) + "'>\n  </div>\n  <h3 class='lightbox-title'>" + ($e($c(this.data.title))) + "</h3>\n</header>\n<ul class='bottomless tabs topless' id='lightbox-tabs'>\n  <li id='kudos'>\n    <a class='tab'>");
      $o.push("      " + $e($c(Strava.I18n.Locale.t('templates.feed.lightbox.kudos'))));
      $o.push("      <span class='kudo_text' data-current-count='" + ($e($c(this.data.kudo_count))) + "'>" + ($e($c(this.data.kudo_text))) + "</span>\n    </a>\n  </li>\n  <li id='comments'>\n    <a class='tab'>");
      $o.push("      " + $e($c(Strava.I18n.Locale.t('templates.feed.lightbox.comments'))));
      $o.push("      <span class='comment_text'>" + ($e($c(this.data.comment_text))) + "</span>\n    </a>\n  </li>\n  <li id='achievements' style='display: none'>\n    <a class='tab'>" + ($e($c(Strava.I18n.Locale.t('templates.feed.lightbox.achievements', {
        achievements_count: this.data.achievements_count
      })))) + "</a>\n  </li>\n  <li id='group-athletes' style='display: none'>\n    <a class='tab'>" + ($e($c(Strava.I18n.Locale.t('templates.feed.lightbox.other_athletes')))) + "</a>\n  </li>\n</ul>\n<div class='modal-body' id='tab-contents'>\n  <div class='centerAlign'>\n    <div class='sm spinner'>\n      <div class='graphic'></div>\n      <span class='status'></span>\n    </div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Feed');

  Strava.Feed.PopoverBoxView = (function(superClass) {
    var commentBoxViewCache, kudoBoxViewCache;

    extend(PopoverBoxView, superClass);

    commentBoxViewCache = {};

    kudoBoxViewCache = {};

    function PopoverBoxView(commentsController, kudosController, groupRideController) {
      this.template = 'feed/lightbox';
      this.lightbox = new Strava.Ui.LightboxView();
      this.commentsController = commentsController;
      this.kudosController = kudosController;
      this.groupRideController = groupRideController;
      this.commentsController.bind('commentCreated', (function(_this) {
        return function(resp, key) {
          return _this.updateCommentCount(key);
        };
      })(this)).bind('commentDeleted', (function(_this) {
        return function(key) {
          return _this.updateCommentCount(key);
        };
      })(this));
      this.kudosController.bind('kudoCreated', (function(_this) {
        return function() {
          return _this.updateKudoCount();
        };
      })(this));
      PopoverBoxView.__super__.constructor.call(this);
    }

    PopoverBoxView.prototype.render = function(entity, entityId, data, tabSelected, showGroupAthletes, showKudos, activityAthlete) {
      if (showKudos == null) {
        showKudos = true;
      }
      this.setElement('<div></div>');
      this.renderTemplate(this.getModelJson(entity, entityId, data));
      this.lightbox.render(this.el);
      this.createTabs(entity, entityId, tabSelected, showGroupAthletes, showKudos, activityAthlete, data.comments_disabled);
      return this;
    };

    PopoverBoxView.prototype.getModelJson = function(entity, entityId, data) {
      var key;
      key = entity + "-" + entityId;
      data.comment_text = this.getCommentTabText(key, data);
      if (!data.kudo_count) {
        data.kudo_count = this.getDOMKudoCount(key);
      }
      data.kudo_text = data.kudo_count > 0 ? "(" + (new TwitterCldr.DecimalFormatter().format(data.kudo_count)) + ")" : '';
      return {
        data: data
      };
    };

    PopoverBoxView.prototype.getCommentTabText = function(key, data) {
      var comment_count;
      if (data == null) {
        data = {};
      }
      comment_count = data.comment_count || this.commentsController.getFromHash(key).length;
      if (comment_count > 0) {
        return "(" + (new TwitterCldr.DecimalFormatter().format(comment_count)) + ")";
      } else {
        return '';
      }
    };

    PopoverBoxView.prototype.getDOMKudoCount = function(key) {
      return this.$$(".feed #" + key + " .count-kudos").data('kudo-count');
    };

    PopoverBoxView.prototype.updateKudoCount = function() {
      var $kudo_text, kudo_count;
      $kudo_text = this.$('.kudo_text');
      kudo_count = parseInt($kudo_text.data('current-count') || 0, 10);
      return $kudo_text.html("(" + (new TwitterCldr.DecimalFormatter().format(kudo_count + 1)) + ")");
    };

    PopoverBoxView.prototype.updateCommentCount = function(key) {
      var text;
      text = this.getCommentTabText(key);
      return this.$('span.comment_text').html(text);
    };

    PopoverBoxView.prototype.createTabs = function(entity, entityId, tabSelected, showGroupAthletes, showKudos, activityAthlete, commentsDisabled) {
      var commentSelected, groupRideSelected, kudoSelected, tabController, tabs;
      if (showKudos == null) {
        showKudos = true;
      }
      commentSelected = kudoSelected = groupRideSelected = false;
      if (tabSelected === 'comments') {
        commentSelected = true;
      } else if (tabSelected === 'kudos') {
        kudoSelected = true;
      } else if ('groupriders') {
        groupRideSelected = true;
      }
      tabs = [];
      tabs.push({
        selector: 'li#comments',
        renderer: this.commentBoxView(entity, entityId, commentsDisabled),
        selected: commentSelected
      });
      if (showKudos) {
        tabs.push({
          selector: 'li#kudos',
          renderer: this.kudoBoxView(entity, entityId),
          selected: kudoSelected
        });
        this.$('li#kudos').show();
      } else {
        this.$('li#kudos').hide();
      }
      if (showGroupAthletes) {
        tabs.push({
          selector: 'li#group-athletes',
          renderer: new Strava.Feed.GroupRideView(this.groupRideController, entity, entityId, activityAthlete),
          selected: groupRideSelected
        });
        this.$('li#group-athletes').show();
      }
      tabController = new Strava.Ui.TabController(tabs, '#lightbox-tabs');
      return tabController.render();
    };

    PopoverBoxView.prototype.commentBoxView = function(entity, entityId, commentsDisabled) {
      var key;
      key = entity + "-" + entityId;
      if (!commentBoxViewCache[key]) {
        commentBoxViewCache[key] = new Strava.Feed.CommentBoxView(this.commentsController, entity, entityId, commentsDisabled);
      }
      return commentBoxViewCache[key];
    };

    PopoverBoxView.prototype.kudoBoxView = function(entity, entityId) {
      var key;
      key = entity + "-" + entityId;
      if (!kudoBoxViewCache[key]) {
        kudoBoxViewCache[key] = new Strava.Feed.KudoBoxView(this.kudosController, entity, entityId);
      }
      return kudoBoxViewCache[key];
    };

    PopoverBoxView.show = function(entity, entityId, data, tabSelected, showGroupAthletes, activityAthlete) {
      if (tabSelected == null) {
        tabSelected = 'comments';
      }
      if (showGroupAthletes == null) {
        showGroupAthletes = false;
      }
      return this.instance.render(entity, entityId, data, tabSelected, showGroupAthletes, true, activityAthlete);
    };

    PopoverBoxView.createInstance = function(commentsController, kudosController, groupRideController) {
      return this.instance = new Strava.Feed.PopoverBoxView(commentsController, kudosController, groupRideController);
    };

    return PopoverBoxView;

  })(Backbone.View);

  Strava.Feed.PopoverBoxActivityView = (function(superClass) {
    extend(PopoverBoxActivityView, superClass);

    function PopoverBoxActivityView() {
      return PopoverBoxActivityView.__super__.constructor.apply(this, arguments);
    }

    PopoverBoxActivityView.prototype.getDOMKudoCount = function(key) {
      return this.$$('#kudos .count').data('count');
    };

    PopoverBoxActivityView.createInstance = function(commentsController, kudosController, groupRideController) {
      return this.instance = new Strava.Feed.PopoverBoxActivityView(commentsController, kudosController, groupRideController);
    };

    return PopoverBoxActivityView;

  })(Strava.Feed.PopoverBoxView);

  Strava.Feed.PopoverBoxPostView = (function(superClass) {
    extend(PopoverBoxPostView, superClass);

    function PopoverBoxPostView() {
      return PopoverBoxPostView.__super__.constructor.apply(this, arguments);
    }

    PopoverBoxPostView.createInstance = function(commentsController, kudosController) {
      return this.instance = new Strava.Feed.PopoverBoxPostView(commentsController, kudosController, null);
    };

    PopoverBoxPostView.show = function(entity, entityId, data, tabSelected, showKudos) {
      if (tabSelected == null) {
        tabSelected = 'comments';
      }
      if (showKudos == null) {
        showKudos = true;
      }
      return this.instance.render(entity, entityId, data, tabSelected, false, showKudos);
    };

    return PopoverBoxPostView;

  })(Strava.Feed.PopoverBoxView);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/loading_box'] = function(context) {
    return (function() {
      var $o;
      $o = [];
      $o.push("<div class='centerAlign pb-lg pt-lg'>\n  <div class='sm spinner vcentered'>\n    <div class='graphic'></div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Feed');

  Strava.Feed.SocialBoxView = (function(superClass) {
    extend(SocialBoxView, superClass);

    function SocialBoxView() {
      this.selected = false;
      this.loadingTemplate = 'feed/loading_box';
    }

    SocialBoxView.prototype.renderLoading = function() {
      return this.renderTemplate({}, this.loadingTemplate);
    };

    SocialBoxView.prototype.unselect = function() {
      return this.selected = false;
    };

    SocialBoxView.prototype.select = function() {
      return this.selected = true;
    };

    SocialBoxView.prototype.show = function() {};

    return SocialBoxView;

  })(Backbone.View);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/comment_box'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<!-- / Lightbox Comments -->\n<div class='comments'>\n  <p class='no-comments'>" + ($e($c(Strava.I18n.Locale.t('templates.feed.comment_box.no_comments')))) + "</p>\n  <ol class='thread'></ol>\n  <!-- / If the variable commentsDisable doesnt exist, or if it exists & is not true -->");
      if ((this.commentsDisabled == null) || ((this.commentsDisabled != null) && !this.commentsDisabled)) {
        $o.push("  <form class='media'>\n    <div class='media-left'>\n      <div class='avatar avatar-athlete avatar-sm'>\n        <img class='avatar-img' src='" + ($e($c(this.athlete.photo))) + "' alt='" + ($e($c(this.athlete.display_name))) + "' title='" + ($e($c(this.athlete.display_name))) + "'>\n      </div>\n    </div>\n    <div class='media-content mentionable-comment-field' data-react-class='MentionableComment' data-react-props='" + ($e($c(JSON.stringify({
          'entity': this.entity,
          buttonClasses: 'btn btn-default btn-sm',
          'entityId': this.entityId,
          suggestionLimit: 10,
          clubMentionsEnabled: true
        })))) + "'></div>\n  </form>");
      }
      $o.push("</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/comment_box_comment'] = function(context) {
    return (function() {
      var $c, $e, $o, i, len, ref, token;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='media-left'>\n  <a class='avatar avatar-athlete avatar-sm'>\n    <img class='avatar-img' src='" + ($e($c(this.athlete.avatar_url))) + "' alt='" + ($e($c(this.athlete.name))) + "' title='" + ($e($c(this.athlete.name))) + "'>\n  </a>\n</div>\n<div class='comment media-body'>\n  <a class='athlete-name' href='/athletes/" + ($e($c(this.athlete.id))) + "'>" + ($e($c(this.athlete.name))) + "</a>\n  <div class='comment-text'>");
      if (_.isString(this.comment)) {
        $o.push("    " + $e($c(this.comment)));
      } else {
        ref = this.comment;
        for (i = 0, len = ref.length; i < len; i++) {
          token = ref[i];
          if (token.type === 'mention_token') {
            $o.push("    <a class='mentioned-athlete' href='" + ($e($c(token.path))) + "'>" + ($e($c(token.text))) + "</a>");
          } else {
            $o.push("    " + $e($c(token.text)));
          }
        }
      }
      $o.push("  </div>\n</div>\n<div class='media-actions'>");
      $o.push("  " + $c(this.timestamp));
      $o.push("  <div class='actionable'></div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/delete_link'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<button class='btn btn-link delete' data-comment-id='" + ($e($c(this.comment_id))) + "' title='" + ($e($c(Strava.I18n.Locale.t('templates.feed.delete_link_v2.delete_title')))) + "'>");
      $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.feed.delete_link_v2.delete'))));
      $o.push("</button>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/report_link'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<a class='report' href='/comments/" + ($e($c(this.comment_id))) + "/feedback' data-comment-id='" + ($e($c(this.comment_id))) + "'>");
      $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.feed.report_link.report'))));
      $o.push("</a>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/quarantine_link'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<a class='report' href='" + ($e($c("/admin/quarantine/comment_form?comment_id=" + this.comment_id))) + "' target='_blank'>Soft Delete</a>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Feed');

  Strava.Feed.CommentBoxView = (function(superClass) {
    extend(CommentBoxView, superClass);

    CommentBoxView.prototype.events = {
      'submit form': 'createComment'
    };

    function CommentBoxView(controller, entity, entity_id, commentsDisabled) {
      this.controller = controller;
      this.entity = entity;
      this.entity_id = entity_id;
      this.commentsDisabled = commentsDisabled;
      this.template = 'feed/comment_box';
      this.controller.bind('commentCreated', (function(_this) {
        return function(resp) {
          var $thread, elem;
          elem = _this.createCommentElem(resp);
          _this.$('p.no-comments').remove();
          $thread = _this.$('ol.thread');
          if ($thread.length) {
            $thread.scrollTop($thread[0].scrollHeight);
            $thread.append(elem).find('li').slideDown();
            return _this.$('form textarea').val('');
          }
        };
      })(this));
      this.controller.bind('commentCompleted', (function(_this) {
        return function() {
          return _this.$("form input[type='submit']").removeAttr('disabled');
        };
      })(this));
      CommentBoxView.__super__.constructor.call(this);
    }

    CommentBoxView.prototype.createCommentElem = function(comment) {
      var commentView;
      commentView = new Strava.Feed.CommentBoxComment(this.controller, comment, this.entity, this.entity_id);
      return commentView.render().el;
    };

    CommentBoxView.prototype.createComment = function() {
      var text;
      text = jQuery.trim(this.$('form textarea').val());
      if (text.length) {
        this.$("form input[type='submit']").attr('disabled', 'disabled');
        this.controller.comment(this.entity, this.entity_id, text, {});
      }
      return false;
    };

    CommentBoxView.prototype.render = function(target) {
      this.setElement(target);
      this.renderLoading();
      this.controller.fetchComments(this.entity, this.entity_id, ((function(_this) {
        return function(comments) {
          return _this.handleSuccess(comments);
        };
      })(this)), ((function(_this) {
        return function(resp) {
          return _this.renderEmpty();
        };
      })(this)));
      return this;
    };

    CommentBoxView.prototype.renderEmpty = function() {
      this.renderTemplate({
        athlete: currentAthlete.toJSON(),
        entity: this.entity,
        entityId: this.entity_id,
        commentsDisabled: this.commentsDisabled
      });
      if (this.controller.commentable) {
        return this.$('textarea').focus();
      } else {
        return this.$('form').hide();
      }
    };

    CommentBoxView.prototype.handleSuccess = function(comments) {
      var comment, e, elements, i, len, node;
      this.renderEmpty();
      elements = [];
      for (i = 0, len = comments.length; i < len; i++) {
        comment = comments[i];
        elements.push(this.createCommentElem(comment));
      }
      if (elements.length) {
        this.$('.no-comments').remove();
        this.$('ol.thread').append(elements).find('li').fadeIn('fast');
      }
      node = this.$('.mentionable-comment-field');
      if (node.length) {
        e = new CustomEvent('JSCreatedReactNode', {
          detail: {
            node: node
          }
        });
        document.dispatchEvent(e);
      }
      return this;
    };

    return CommentBoxView;

  })(Strava.Feed.SocialBoxView);

  Strava.Feed.CommentBoxComment = (function(superClass) {
    extend(CommentBoxComment, superClass);

    CommentBoxComment.prototype.tagName = 'li';

    CommentBoxComment.prototype.className = 'media';

    CommentBoxComment.prototype.attributes = {
      'style': 'display: none'
    };

    CommentBoxComment.prototype.events = {
      'click .delete': 'deleteComment',
      'click .report': 'reportComment'
    };

    function CommentBoxComment(controller, comment1, entity, entity_id) {
      this.controller = controller;
      this.comment = comment1;
      this.entity = entity;
      this.entity_id = entity_id;
      this.template = 'feed/comment_box_comment';
      this.thread_key = this.entity + "-" + this.entity_id;
      CommentBoxComment.__super__.constructor.call(this);
    }

    CommentBoxComment.prototype.deleteComment = function(event) {
      Strava.ExternalAnalytics.trackV2({
        category: this.analyticsCategory(),
        page: 'comment',
        action: 'click',
        element: 'delete',
        properties: this.analyticsPropertiesForComment
      });
      if (confirm(Strava.I18n.Locale.t('strava.feed.comment_box_view.confirm_delete'))) {
        Strava.ExternalAnalytics.trackV2({
          category: this.analyticsCategory(),
          page: 'comment',
          action: 'click',
          element: 'confirm_delete',
          properties: this.analyticsPropertiesForComment
        });
        this.controller.deleteComment(this.thread_key, this.comment.comment_id);
        this.$el.slideUp('fast', (function(_this) {
          return function() {
            return _this.remove();
          };
        })(this));
      }
      return false;
    };

    CommentBoxComment.prototype.reportComment = function(event) {
      event.preventDefault();
      Strava.ExternalAnalytics.trackV2({
        category: this.analyticsCategory(),
        page: 'comment',
        action: 'click',
        element: 'report',
        properties: this.analyticsPropertiesForComment()
      });
      return window.location = jQuery(event.target).attr('href');
    };

    CommentBoxComment.prototype.analyticsPropertiesForComment = function() {
      var properties;
      properties = {
        comment_id: this.comment.comment_id
      };
      switch (this.entity) {
        case 'Activity':
          properties.activity_id = this.entity_id;
          break;
        case 'Post':
          properties.post_id = this.entity_id;
      }
      return properties;
    };

    CommentBoxComment.prototype.analyticsCategory = function() {
      var location;
      location = window.location.href;
      if (location.indexOf('posts') !== -1) {
        return 'post_detail';
      } else if (location.indexOf('activities') !== -1) {
        return 'activity_detail';
      } else if (location.indexOf('athletes') !== -1) {
        return 'athlete_profile';
      } else {
        return 'feed';
      }
    };

    CommentBoxComment.prototype.render = function() {
      var $actionable, $elem, datetime, deleteLinkTemplate, elem, i, len, quarantineLinkTemplate, ref, reportLinkTemplate, timeago;
      this.renderTemplate({
        athlete: this.comment.athlete,
        comment: this.comment.comment,
        timestamp: this.comment.timestamp
      });
      ref = this.$('time.timeago');
      for (i = 0, len = ref.length; i < len; i++) {
        elem = ref[i];
        $elem = this.$(elem);
        if (datetime = $elem.attr('datetime')) {
          timeago = Strava.I18n.TimespanFormatter.timeago(Date.parse(datetime));
          $elem.html(timeago);
        }
      }
      if (this.comment.reportable || this.comment.deletable || this.comment.quarantinable) {
        $actionable = this.$el.find('.actionable');
        if (this.comment.reportable) {
          reportLinkTemplate = this.getTemplateFor('feed/report_link');
          $actionable.append(reportLinkTemplate({
            comment_id: this.comment.comment_id
          }));
        }
        if (this.comment.deletable) {
          deleteLinkTemplate = this.getTemplateFor('feed/delete_link');
          $actionable.append(deleteLinkTemplate({
            comment_id: this.comment.comment_id
          }));
        }
        if (this.comment.quarantinable) {
          quarantineLinkTemplate = this.getTemplateFor('feed/quarantine_link');
          $actionable.append(quarantineLinkTemplate({
            comment_id: this.comment.comment_id
          }));
        }
      }
      return this;
    };

    return CommentBoxComment;

  })(Backbone.View);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['athletes/athlete_list_element'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='media'>\n  <div class='media-object'>\n    <a class='avatar avatar-athlete avatar-sm' href='/athletes/" + ($e($c(this.athlete.id))) + "' title='" + ($e($c(this.athlete.name))) + "'>\n      <img class='avatar-img' src='" + ($e($c(this.athlete.avatar_url))) + "' alt='" + ($e($c(this.athlete.name))) + "' title='" + ($e($c(this.athlete.name))) + "'>\n    </a>\n  </div>\n  <div class='media-content'>\n    <div class='media-body'>\n      <div class='name'>\n        <a class='athlete-name minimal' href='/athletes/" + ($e($c(this.athlete.id))) + "'>");
      $o.push("          " + $e($c(this.athlete.name)));
      if (this.athlete.member_type) {
        $o.push("          <div class='app-icon-wrapper'>\n            <div class='" + (['app-icon', 'icon-sm', "icon-badge-" + ($e($c(this.athlete.member_type)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' title='" + ($e($c(Strava.I18n.Locale.t("templates.athletes.member_types." + this.athlete.member_type)))) + "'></div>\n          </div>");
      }
      $o.push("        </a>\n        <span class='activity-title'>" + ($c("&ndash; " + this.athlete.activity_link)) + "</span>\n      </div>\n      <div class='location'>" + ($e($c(this.athlete.location))) + "</div>\n    </div>\n    <div class='action-buttons media-actions'>\n      <span class='follow-action follow-button'>\n        <div class='stub'></div>\n      </span>\n    </div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.AthleteListView = (function(superClass) {
    extend(AthleteListView, superClass);

    AthleteListView.prototype.tagName = 'li';

    AthleteListView.prototype.attributes = {
      'style': 'display: none'
    };

    AthleteListView.prototype.events = {
      'click .remove-athlete': 'removeAthlete'
    };

    function AthleteListView(athlete, entityId, activityAthlete) {
      this.athlete = athlete;
      this.entityId = entityId;
      this.activityAthlete = activityAthlete;
      this.template = 'athletes/athlete_list_element';
      AthleteListView.__super__.constructor.call(this);
    }

    AthleteListView.prototype.render = function() {
      var action;
      this.renderTemplate({
        athlete: this.athlete,
        entityId: this.entityId,
        activityAthlete: this.activityAthlete
      });
      jQuery(this.$el).find('.follow-button').attr('data-athlete-id', this.athlete.id);
      if (!this.athlete.is_following) {
        if (this.athlete.is_private) {
          action = Strava.Follows.Factory.createFollowWithApprovalAction(this.athlete.id);
        } else {
          action = Strava.Follows.Factory.createFollowAction(this.athlete.id);
        }
        action.enter(this.$('.follow-button .stub'));
      }
      return this;
    };

    AthleteListView.prototype.removeAthlete = function() {
      if (confirm(Strava.I18n.Locale.t('templates.feed.lightbox.remove_athlete_confirm'))) {
        return jQuery.ajax({
          url: "/activities/" + this.entityId + "/grouping/" + this.athlete.activity_id,
          type: 'DELETE',
          success: (function(_this) {
            return function() {
              return _this.$el.hide();
            };
          })(this)
        });
      }
    };

    return AthleteListView;

  })(Backbone.View);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/kudo_box_layout'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<ul class='list-athletes list-kudos' id='kudo-list'></ul>\n<div class='actions actions-kudo modal-footer' style='display: none;'>\n  <button class='btn btn-default compact create-kudo' disabled='disabled'>");
      $o.push("    " + $e($c(Strava.I18n.Locale.t('templates.feed.kudo_box_layout.give_kudos'))));
      $o.push("  </button>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/kudo_current_athlete'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<li class='current-athlete'>\n  <div class='media'>\n    <div class='media-object'>\n      <a class='avatar avatar-athlete avatar-sm' href='/athletes/" + ($e($c(this.athlete.id))) + "' title='" + ($e($c(this.athlete.display_name))) + "'>\n        <img class='avatar-img' src='" + ($e($c(this.athlete.photo))) + "' alt='" + ($e($c(this.athlete.display_name))) + "' title='" + ($e($c(this.athlete.display_name))) + "'>\n      </a>\n    </div>\n    <div class='media-content'>\n      <div class='media-body'>\n        <span class='name'>\n          <a class='athlete-name minimal' href='/athletes/" + ($e($c(this.athlete.id))) + "'>");
      $o.push("            " + $e($c(this.athlete.display_name)));
      if (this.athlete.member_type) {
        $o.push("            <div class='app-icon-wrapper'>\n              <div class='" + (['app-icon', 'icon-sm', "icon-badge-" + ($e($c(this.athlete.member_type)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' title='" + ($e($c(Strava.I18n.Locale.t("templates.athletes.member_types." + this.athlete.member_type)))) + "'></div>\n            </div>");
      }
      $o.push("          </a>\n        </span>\n        <span class='location'>" + ($e($c(this.athlete.display_location))) + "</span>\n      </div>\n    </div>\n  </div>\n</li>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['feed/no_kudos'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<p class='no-kudos'>" + ($e($c(Strava.I18n.Locale.t('templates.feed.no_kudos.no_kudos_yet_v2')))) + "</p>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Feed');

  Strava.Feed.KudoBoxView = (function(superClass) {
    extend(KudoBoxView, superClass);

    KudoBoxView.prototype.events = {
      'click .create-kudo:not([disabled="disabled"])': 'createKudo'
    };

    function KudoBoxView(controller, entity, entity_id) {
      this.controller = controller;
      this.entity = entity;
      this.entity_id = entity_id;
      this.kudoTemplate = 'feed/kudo_box_layout';
      this.noKudosTemplate = 'feed/no_kudos';
      this.currentAthleteTemplate = 'feed/kudo_current_athlete';
      this.controller.bind('kudoCreated', (function(_this) {
        return function() {
          return _this.handleKudoCreate();
        };
      })(this));
      KudoBoxView.__super__.constructor.call(this);
    }

    KudoBoxView.prototype.render = function(target) {
      this.setElement(target);
      this.renderLoading();
      this.controller.fetchKudos(this.entity, this.entity_id, ((function(_this) {
        return function(athletes, canKudo, isOwner) {
          return _this.handleSuccess(athletes, canKudo, isOwner);
        };
      })(this)), ((function(_this) {
        return function(msg) {
          return _this.handleError(msg);
        };
      })(this)));
      return this;
    };

    KudoBoxView.prototype.handleSuccess = function(kudos, canKudo, isOwner) {
      var athletes, i, kudo, len;
      if (!this.selected) {
        return this;
      }
      this.renderTemplate({}, this.kudoTemplate);
      athletes = [];
      for (i = 0, len = kudos.length; i < len; i++) {
        kudo = kudos[i];
        athletes.push(this.createAthleteElem(kudo));
      }
      if (athletes.length) {
        this.$('#kudo-list').append(athletes).find('li').fadeIn('fast');
      } else {
        this.handleEmptyList();
      }
      if (!isOwner) {
        this.$('.actions').slideDown('fast');
      }
      if (canKudo) {
        this.$('.create-kudo').removeAttr('disabled');
      }
      return this;
    };

    KudoBoxView.prototype.handleEmptyList = function() {
      var noKudosTemplate;
      noKudosTemplate = this.getTemplateFor(this.noKudosTemplate);
      return this.$('#kudo-list').closest('#tab-contents').prepend(noKudosTemplate({}));
    };

    KudoBoxView.prototype.handleError = function(msg) {};

    KudoBoxView.prototype.createKudo = function() {
      this.controller.kudo(this.entity, this.entity_id);
      return false;
    };

    KudoBoxView.prototype.handleKudoCreate = function() {
      var $kudoList, template;
      if (!this.selected) {
        return;
      }
      $kudoList = this.$('#kudo-list');
      template = this.getTemplateFor(this.currentAthleteTemplate);
      $kudoList.append(template({
        athlete: currentAthlete.toJSON()
      }));
      this.$('.no-kudos').remove();
      return this.$('button.create-kudo').addClass('kudoed').attr('disabled', 'disabled');
    };

    KudoBoxView.prototype.createAthleteElem = function(follower) {
      var athlete;
      athlete = new Strava.AthleteListView(follower);
      return athlete.render().el;
    };

    return KudoBoxView;

  })(Strava.Feed.SocialBoxView);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.DiscussionView = (function(superClass) {
    extend(DiscussionView, superClass);

    DiscussionView.prototype.tagName = 'div';

    DiscussionView.prototype.events = {
      'click #show-post-fields': 'showPostForm',
      'click .no-discussions .inline-post a': 'showPostForm',
      'click #create-post': 'handleCreatePost',
      'keyup #post-block textarea': 'handleKeyUpTextArea',
      'blur #post-block': 'handleBlurInputs',
      'focus #post-block': 'handleFocusInputs'
    };

    function DiscussionView(controller, contents, pagination, options, kudosController, commentsController) {
      this.controller = controller;
      this.pagination = pagination;
      this.options = options != null ? options : {};
      this.kudosController = kudosController != null ? kudosController : null;
      this.commentsController = commentsController != null ? commentsController : null;
      DiscussionView.__super__.constructor.call(this);
      this.persistentPrompt = false;
      this.allowToPost = true;
      this.postsAdminsOnly = false;
      this.clubUrl = null;
      this.newPostPath = null;
      if (this.options.persistentPrompt != null) {
        this.persistentPrompt = this.options.persistentPrompt;
      }
      if (this.options.enablePosts != null) {
        this.allowToPost = this.options.enablePosts;
      }
      if (this.options.postsAdminsOnly != null) {
        this.postsAdminsOnly = this.options.postsAdminsOnly;
      }
      if (this.options.clubUrl != null) {
        this.clubUrl = this.options.clubUrl;
      }
      if ((this.options.inlinePost != null) && !this.options.inlinePost) {
        this.newPostPath = "/clubs/" + this.controller.parent.id + "/posts/new";
      }
      if ((this.kudosController != null) && (this.commentsController != null)) {
        Strava.Feed.PopoverBoxPostView.createInstance(this.commentsController, this.kudosController);
      }
      this.setElement(contents);
      this.selected = false;
      this.template = 'discussions/discussion';
      this.controller.bind('dataChange', (function(_this) {
        return function(changeData) {
          return _this.appendTopics(changeData);
        };
      })(this));
      this.controller.bind('postAddChange', (function(_this) {
        return function() {
          _this.clearForm();
          return _this.renderNewPost();
        };
      })(this));
      this.controller.bind('postDeleteChange', (function(_this) {
        return function(post_id) {
          return _this.$("li[data-post-id=" + post_id + "]").fadeOut(300, function() {
            jQuery(_this).remove();
            return _this.renderNoDiscussions();
          });
        };
      })(this));
      this.titleEnabled = false;
    }

    DiscussionView.prototype.setTitleEnabled = function(value) {
      return this.titleEnabled = value;
    };

    DiscussionView.prototype.unselect = function() {
      return this.selected = false;
    };

    DiscussionView.prototype.select = function() {
      return this.selected = true;
    };

    DiscussionView.prototype.render = function() {
      var avatarHtml, avatarView;
      if (!this.selected) {
        return this;
      }
      this.renderTemplate({
        parentType: this.controller.parent.tabelized,
        showCreatePost: !this.persistentPrompt,
        showTitle: this.titleEnabled,
        allowToPost: this.allowToPost,
        postsAdminsOnly: this.postsAdminsOnly,
        clubUrl: this.clubUrl,
        newPostPath: this.newPostPath
      });
      this.pagination.render(this.$('.pagination'));
      avatarView = new Strava.Discussions.AvatarView();
      avatarHtml = avatarView.currentAthleteAvatarHtml();
      this.$('.post-author').append(avatarHtml);
      return this;
    };

    DiscussionView.prototype.clearForm = function() {
      if (this.persistentPrompt) {
        this.$('#create-post').prop('disabled', true);
      } else {
        this.$('#create-post').prop('disabled', false);
        this.$('#create-post').hide();
        this.$('#post-block').hide();
      }
      this.$('textarea').val('');
      return this.$('input[name=title]').val('');
    };

    DiscussionView.prototype.showPostForm = function(focus) {
      if (focus == null) {
        focus = true;
      }
      this.$('#post-block').show();
      this.$('.no-discussions').addClass('hidden');
      if (focus) {
        this.$('#post-block input[name=title]').focus();
      }
      this.$('#create-post').show();
      return this.$('#create-post').prop('disabled', true);
    };

    DiscussionView.prototype.handleCreatePost = function(e) {
      var text, title;
      this.$('#create-post').prop('disabled', true);
      text = jQuery.trim(this.$('#post-block textarea').val());
      title = jQuery.trim(this.$('#post-block input[name=title]').val());
      if (text.length > 0) {
        this.controller.createPost(title, text);
        return e.preventDefault();
      }
    };

    DiscussionView.prototype.handleKeyUpTextArea = function() {
      if (jQuery.trim(this.$('#post-block textarea').val()).length > 0) {
        return this.$('#create-post').prop('disabled', false);
      } else {
        return this.$('#create-post').prop('disabled', true);
      }
    };

    DiscussionView.prototype.handleFocusInputs = function(event) {
      if (this.blurredDeferred) {
        return this.blurredDeferred.reject();
      }
    };

    DiscussionView.prototype.resetCreatePostForm = function() {
      var $textArea, $titleInput, text, title;
      this.blurredDeferred = null;
      if (this.peristentPrompt) {
        return;
      }
      $textArea = this.$('#post-block textarea');
      $titleInput = this.$('#post-block input[name=title]');
      text = jQuery.trim($textArea.val());
      title = jQuery.trim($titleInput.val());
      if (text.length === 0 && title.length === 0) {
        this.clearForm();
        return this.renderNoDiscussions();
      }
    };

    DiscussionView.prototype.handleBlurInputs = function(event) {
      var deferred;
      deferred = jQuery.Deferred();
      this.blurredDeferred = deferred;
      this.blurredDeferred.done((function(_this) {
        return function() {
          return _this.resetCreatePostForm();
        };
      })(this));
      return setTimeout((function() {
        return deferred.resolve();
      }), 500);
    };

    DiscussionView.prototype.renderNoDiscussions = function() {
      if (this.controller.posts.length === 0) {
        if (this.persistentPrompt && this.allowToPost) {
          return this.$('.no-discussions').addClass('hidden');
        } else {
          return this.$('.no-discussions').removeClass('hidden');
        }
      }
    };

    DiscussionView.prototype.renderTopics = function() {
      this.$('div.loading-panel').hide();
      this.$('#discussion-topics').empty();
      if (this.persistentPrompt) {
        this.showPostForm(false);
        this.$('#create-post').show();
      }
      this.renderNoDiscussions();
      return this.appendTopics({
        startIndex: 0
      });
    };

    DiscussionView.prototype.appendTopics = function(changeData) {
      var $container, topics;
      $container = this.$('#discussion-topics');
      topics = this.controller.posts;
      topics.each((function(_this) {
        return function(topic, index) {
          var postView;
          if (index >= changeData.startIndex) {
            postView = new Strava.Discussions.PostView(_this.controller, topic, _this.options, _this.kudosController, _this.commentsController);
            return $container.append(postView.render().el);
          }
        };
      })(this));
      return this;
    };

    DiscussionView.prototype.renderNewPost = function() {
      var elem, postView;
      postView = new Strava.Discussions.PostView(this.controller, this.controller.posts.first(), this.options, this.kudosController, this.commentsController);
      elem = postView.render().el;
      jQuery(elem).hide();
      this.$('#discussion-topics').prepend(elem);
      return jQuery(elem).fadeIn();
    };

    DiscussionView.prototype.show = function() {
      if (this.shown) {
        return;
      }
      this.shown = true;
      this.render();
      return this.renderTopics();
    };

    DiscussionView.prototype.turnShownOff = function() {
      return this.shown = false;
    };

    return DiscussionView;

  })(Backbone.View);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/more_posts'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<button class='btn button'>");
      $o.push("  " + $e($c(Strava.I18n.Locale.t('templates.discussions.more_posts.see_more_posts'))));
      $o.push("</button>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.MorePostsView = (function(superClass) {
    extend(MorePostsView, superClass);

    MorePostsView.prototype.events = {
      'click button': 'loadMorePosts'
    };

    function MorePostsView(pagingController) {
      this.pagingController = pagingController;
      this.template = 'discussions/more_posts';
      MorePostsView.__super__.constructor.call(this);
    }

    MorePostsView.prototype.initialize = function() {
      return this.pagingController.bind('reset', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    };

    MorePostsView.prototype.render = function(target) {
      if (target) {
        this.setElement(target);
      }
      if (this.pagingController.hasNext()) {
        this.renderTemplate();
      } else {
        this.$el.empty();
      }
      return this;
    };

    MorePostsView.prototype.loadMorePosts = function(event) {
      this.$(event.target).addClass('loading-more').text(Strava.I18n.Locale.t('strava.dashboard.pagination_view.loading'));
      return this.pagingController.nextPage();
    };

    return MorePostsView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Models');

  Strava.Models.Photo = (function(superClass) {
    var createImage;

    extend(Photo, superClass);

    function Photo() {
      return Photo.__super__.constructor.apply(this, arguments);
    }

    Photo.prototype.initialize = function() {
      return this.id = this.get("photo_id");
    };

    Photo.prototype.prepareThumbnail = function() {
      if (this.thumbnailDeferred) {
        return this.thumbnailDeferred;
      }
      this.thumbnail = createImage(this.get('thumbnail'));
      this.thumbnailDeferred = jQuery.Deferred();
      this.thumbnail.onload = (function(_this) {
        return function() {
          return _this.thumbnailDeferred.resolve(_this, _this.thumbnail);
        };
      })(this);
      this.thumbnail.onerror = (function(_this) {
        return function() {
          return _this.thumbnailDeferred.reject(_this, _this.thumbnail);
        };
      })(this);
      return this.thumbnailDeferred;
    };

    Photo.prototype.selected = function() {
      return this.collection.selected(this);
    };

    Photo.prototype.prepareImage = function() {
      if (this.imageDeferred) {
        return this.imageDeferred;
      }
      this.image = createImage(this.get('large'));
      this.imageDeferred = jQuery.Deferred();
      this.image.onload = (function(_this) {
        return function() {
          return _this.imageDeferred.resolve(_this, _this.image);
        };
      })(this);
      this.image.onerror = (function(_this) {
        return function() {
          return _this.imageDeferred.reject(_this, _this.image);
        };
      })(this);
      return this.imageDeferred;
    };

    Photo.prototype.getThumbnail = function() {
      return this.prepareThumbnail();
    };

    Photo.prototype.getImage = function() {
      return this.prepareImage();
    };

    createImage = function(url) {
      var image;
      image = new Image();
      image.src = url;
      image.alt = 'Photo';
      return image;
    };

    Photo.prototype.captionEscaped = function(value) {
      if (value == null) {
        value = '';
      }
      if (this.get('caption_escaped')) {
        return this.get('caption_escaped');
      } else {
        return value;
      }
    };

    Photo.prototype.activityNameEscaped = function() {
      return this.get('activity').name;
    };

    Photo.prototype.activityDescriptionEscaped = function() {
      return this.get('activity').description;
    };

    Photo.prototype.activityDistance = function() {
      return this.get('activity').distance;
    };

    Photo.prototype.activityElevGain = function() {
      return this.get('activity').elev_gain;
    };

    Photo.prototype.activityElapsedTime = function() {
      return this.get('activity').elapsed_time;
    };

    Photo.prototype.activityType = function() {
      return this.get('activity').type;
    };

    Photo.prototype.activityStartDate = function() {
      return this.get('activity').start_date;
    };

    Photo.prototype.activityId = function() {
      return this.get('activity').id;
    };

    Photo.prototype.lat = function() {
      return this.get('lat');
    };

    Photo.prototype.lng = function() {
      return this.get('lng');
    };

    Photo.prototype["native"] = function() {
      return this.get('native');
    };

    Photo.prototype.isNative = function() {
      return !!this["native"]();
    };

    Photo.prototype.isEditable = function() {
      return !!this.get('editable');
    };

    Photo.prototype.isUnlinkable = function() {
      return !this.isNative() && this.isEditable();
    };

    Photo.prototype.isReported = function() {
      return !!this.get('report_reason');
    };

    Photo.prototype.isReportable = function() {
      return this.isNative() && !!this.get('activity_id');
    };

    Photo.prototype.isOwner = function() {
      return this.get('owner_id') === this.get('viewing_athlete_id');
    };

    Photo.prototype.isMappable = function() {
      return this.lat() && this.lng();
    };

    Photo.prototype.photoId = function() {
      return this.get('photoId');
    };

    Photo.prototype.ownerdId = function() {
      return this.get('ownerId');
    };

    Photo.prototype.report = function(reason) {
      return this.save({
        report_reason: reason
      });
    };

    Photo.prototype.hasActivity = function() {
      var activity;
      activity = this.get('activity');
      return activity && activity.id;
    };

    Photo.prototype.hasPost = function() {
      return !!this.get('post_id');
    };

    Photo.prototype.targetUrl = function() {
      return this.get('large');
    };

    Photo.prototype.isSponsoredPhoto = function() {
      return !!this.get('is_sponsored_photo');
    };

    Photo.prototype.isEnhancedPhoto = function() {
      return !!this.get('enhanced_photo');
    };

    Photo.prototype.enhancedPhoto = function() {
      return this.get('enhanced_photo');
    };

    return Photo;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Models');

  Strava.Models.Photos = (function(superClass) {
    var _translateIndex;

    extend(Photos, superClass);

    function Photos() {
      return Photos.__super__.constructor.apply(this, arguments);
    }

    Photos.prototype.model = Strava.Models.Photo;

    Photos.prototype.url = '/photos';

    Photos.prototype.initialize = function(models, preloadCount) {
      this.preloadCount = preloadCount != null ? preloadCount : 25;
      this.selectedPhotoIndex = 0;
      return this.on('destroy', (function(_this) {
        return function() {
          return _this.handleDestroy();
        };
      })(this));
    };

    Photos.prototype.selected = function(photo) {
      var selectedIndex;
      selectedIndex = 0;
      this.models.forEach(function(model, index) {
        if (model === photo) {
          return selectedIndex = index;
        }
      });
      this.selectedPhotoIndex = selectedIndex;
      return this.trigger('change:selection');
    };

    Photos.prototype.getSelected = function() {
      return this.at(this.selectedPhotoIndex);
    };

    Photos.prototype.groupedByActivityId = function() {
      var activityPhotos, groupedByActivityId, prevPhoto;
      groupedByActivityId = [];
      activityPhotos = [];
      prevPhoto = null;
      this.models.forEach(function(photo) {
        if ((prevPhoto != null) && prevPhoto.get('activity_id') !== photo.get('activity_id')) {
          groupedByActivityId.push(new Strava.Models.Photos(activityPhotos));
          activityPhotos = [photo];
        } else {
          activityPhotos.push(photo);
        }
        return prevPhoto = photo;
      });
      if (activityPhotos.length > 0) {
        groupedByActivityId.push(new Strava.Models.Photos(activityPhotos));
      }
      return groupedByActivityId;
    };

    Photos.prototype.next = function() {
      this.selectedPhotoIndex = _translateIndex(this.selectedPhotoIndex + 1, this.models.length);
      if (this.selectedPhotoIndex % this.preloadCount === 0) {
        this.prepare(this.selectedPhotoIndex, this.preloadCount);
      }
      this.trigger('change:selection');
      return this.getSelected();
    };

    Photos.prototype.previous = function() {
      this.selectedPhotoIndex = _translateIndex(this.selectedPhotoIndex - 1, this.models.length);
      if (this.selectedPhotoIndex % this.preloadCount === 0) {
        this.prepare(this.selectedPhotoIndex, -1 * this.preloadCount);
      }
      this.trigger('change:selection');
      return this.getSelected();
    };

    Photos.prototype.prepare = function(start, offset) {
      var i, index, j, ref, ref1, ref2, results, sign;
      if (start == null) {
        start = 0;
      }
      if (offset == null) {
        offset = 25;
      }
      if (offset === 0) {
        return;
      }
      sign = offset < 0 ? -1 : 1;
      if (Math.abs(offset) > this.models.length) {
        offset = (this.models.length - 1) * sign;
      }
      results = [];
      for (index = j = ref = start, ref1 = start + offset, ref2 = sign; ref2 > 0 ? j <= ref1 : j >= ref1; index = j += ref2) {
        i = _translateIndex(index, this.models.length);
        results.push(this.models[i].prepareImage());
      }
      return results;
    };

    Photos.prototype.handleDestroy = function() {
      if (this.selectedPhotoIndex >= this.models.length) {
        return this.selectedPhotoIndex = 0;
      }
    };

    Photos.prototype.itemsAfterIndex = function(index) {
      if (index >= this.models.length) {
        return 0;
      }
      if (index < 0) {
        return this.models.length;
      }
      return this.models.length - index - 1;
    };

    _translateIndex = function(index, length) {
      return (length + index % length) % length;
    };

    return Photos;

  })(Backbone.Collection);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.Post = (function(superClass) {
    extend(Post, superClass);

    function Post(attributes, options) {
      var actual_attributes;
      if (options) {
        if (options.parent) {
          this.parent = options.parent;
        } else if (options.collection) {
          this.parent = options.collection.parent;
        }
      }
      actual_attributes = this.parseAttributes(attributes);
      Post.__super__.constructor.call(this, actual_attributes);
    }

    Post.prototype.urlRoot = function() {
      return "/" + this.parent.tabelized + "/" + this.parent.id + "/posts";
    };

    Post.prototype.parse = function(response, xhr) {
      var actual_attributes;
      actual_attributes = this.parseAttributes(response);
      return Post.__super__.parse.call(this, actual_attributes, xhr);
    };

    Post.prototype.parseAttributes = function(attributes) {
      var hash, photos, primary_photo;
      this.comments = new Strava.Discussions.CommentCollection();
      this.comments.reset(attributes.comments, {
        silent: true
      });
      this.author = new Strava.Discussions.Author();
      this.author.set(attributes.author, {
        silent: true
      });
      photos = new Strava.Models.Photos();
      photos.set(attributes.photos, {
        silent: true
      });
      primary_photo = new Strava.Models.Photo();
      primary_photo.set(attributes.primary_photo, {
        silent: true
      });
      hash = {
        id: attributes.id,
        text: attributes.text,
        title: attributes.title,
        ts: attributes.ts,
        deletable: attributes.deletable,
        parent_id: attributes.parent_id,
        parent_type: attributes.parent_type,
        announcement: attributes.announcement,
        photos: photos,
        primary_photo: primary_photo,
        destination_url: attributes.destination_url,
        kudos_count: attributes.kudos_count,
        kudosable: attributes.kudosable,
        kudos_visible: attributes.kudos_visible,
        has_kudoed: attributes.has_kudoed,
        comments_count: this.comments.size(),
        comments_disabled: attributes.comments_disabled,
        trackable_id: attributes.trackable_id
      };
      if (attributes.shared_contents) {
        hash.shared_contents = Strava.SharedContents.Util.prepareSharedContents(attributes.shared_contents);
      }
      return hash;
    };

    Post.prototype.isDeletable = function() {
      return (this.get('deletable') != null) && this.get('deletable');
    };

    Post.prototype.hasPhotos = function() {
      return this.get('photos').length > 0;
    };

    Post.prototype.getCoverPhotoUrl = function() {
      if (this.hasPhotos()) {
        return this.get('primary_photo').targetUrl();
      }
    };

    Post.prototype.getCaptionEscaped = function() {
      if (this.hasPhotos()) {
        return this.get('primary_photo').captionEscaped();
      }
    };

    Post.prototype.toJSON = function(truncate) {
      var json, time_ago;
      if (truncate == null) {
        truncate = false;
      }
      json = Post.__super__.toJSON.call(this);
      json.author = this.author.toJSON();
      json.comments = this.comments.toJSON();
      json.num_comments = this.comments.size();
      time_ago = new TwitterCldr.TimespanFormatter().format(json.ts - Math.round(Date.now() / 1000));
      json.text_formatted = this.textFormatted(json.text, truncate);
      json.time_ago = time_ago;
      return json;
    };

    Post.prototype.escapeText = function(text) {
      return _.template('{{text}}', {
        text: text
      });
    };

    Post.prototype.textFormatted = function(text, truncate, maxLength) {
      var formatter, textTemplate;
      if (truncate == null) {
        truncate = false;
      }
      if (maxLength == null) {
        maxLength = 230;
      }
      textTemplate = this.escapeText(text);
      formatter = Strava.Util.I18n.stringFormatter(textTemplate);
      if (truncate) {
        formatter.truncate(maxLength);
      }
      return formatter.nl2br().end();
    };

    return Post;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.PostCollection = (function(superClass) {
    extend(PostCollection, superClass);

    PostCollection.prototype.model = Strava.Discussions.Post;

    PostCollection.prototype.url = '/posts';

    function PostCollection(models, options) {
      if (options) {
        this.parent = options.parent;
      }
      PostCollection.__super__.constructor.call(this, models, options);
    }

    PostCollection.prototype.fetch = function(options) {
      this.trigger('fetch');
      return PostCollection.__super__.fetch.call(this, options);
    };

    return PostCollection;

  })(Backbone.Collection);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.PostCollectionAdapter = (function(superClass) {
    extend(PostCollectionAdapter, superClass);

    function PostCollectionAdapter(discussion_controller) {
      this.discussion_controller = discussion_controller;
      PostCollectionAdapter.__super__.constructor.call(this);
    }

    PostCollectionAdapter.prototype.fetch = function(options) {
      return this.discussion_controller.fetch(jQuery.extend(true, options, {
        success: (function(_this) {
          return function(response) {
            return _this.handleSuccess(response);
          };
        })(this)
      }));
    };

    PostCollectionAdapter.prototype.handleSuccess = function(response) {
      this.set({
        total: response.total_posts,
        page: response.page,
        perPage: response.perPage
      });
      return this.trigger('reset');
    };

    return PostCollectionAdapter;

  })(Backbone.Model);

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/comment'] = function(context) {
    return (function() {
      var $c, $e, $o, i, len, ref, token;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='reply'>\n  <div>");
      $o.push("    " + $c(this.renderPartial('partials/athlete_avatar', {
        athlete: this.data.author,
        size: 'default'
      })));
      $o.push("  </div>\n  <div class='comment'>\n    <a class='minimal str-click-name-js' href='/athletes/" + ($e($c(this.data.author.id))) + "'>" + ($e($c(this.data.author.name))) + "</a>\n    <time>" + ($e($c(this.data.time_ago))) + "</time>");
      if (this.data.deletable || this.data.reportable) {
        $o.push("    <div class='comment-actions'>");
        if (this.data.reportable) {
          $o.push("      <div class='action-reportable'>\n        <a class='report' href='/comments/" + ($e($c(this.data.id))) + "/feedback'>");
          $o.push("          " + $e($c(Strava.I18n.Locale.t('templates.discussions.comment.report'))));
          $o.push("        </a>\n      </div>");
        }
        if (this.data.deletable) {
          $o.push("      <div class='action-deletable'>\n        <button class='btn btn-link delete'>");
          $o.push("          " + $e($c(Strava.I18n.Locale.t('templates.discussions.comment.delete'))));
          $o.push("        </button>\n      </div>");
        }
        if (this.data.quarantinable) {
          $o.push("      <div class='action-quarantinable'>\n        <a class='report' href='admin/quarantine/comment_form?comment_id=" + ($e($c(this.data.id))) + "'></a>\n      </div>");
        }
        $o.push("    </div>");
      }
      $o.push("    <div class='comment-text'>");
      if (_.isString(this.data.tokenized_text)) {
        $o.push("      " + $e($c(this.data.tokenized_text)));
      } else {
        ref = this.data.tokenized_text;
        for (i = 0, len = ref.length; i < len; i++) {
          token = ref[i];
          if (token.type === 'mention_token') {
            $o.push("      <a class='mentioned-athlete' href='" + ($e($c(token.path))) + "'>" + ($e($c(token.text))) + "</a>");
          } else {
            $o.push("      " + $e($c(token.text)));
          }
        }
      }
      $o.push("    </div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/header'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='mb-sm post-header'>\n  <div class='post-author'></div>\n  <div class='post-info'>\n    <a class='no-style str-click-name-js' href='" + ($e($c(this.data.display_name_url))) + "'>\n      <strong>" + ($e($c(this.data.display_name))) + "</strong>\n    </a>\n    <br>");
      if (this.data.destination_url != null) {
        $o.push("    <a class='no-style str-click-self-js' href='" + ($e($c(this.data.destination_url))) + "'>\n      <time>" + ($e($c(this.data.time_ago))) + "</time>\n    </a>");
      } else {
        $o.push("    <time>" + ($e($c(this.data.time_ago))) + "</time>");
      }
      $o.push("  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/actions'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='actions drop-down-menu minimal'>\n  <div class='selection'>\n    <div class='app-icon-wrapper'>\n      <div class='app-icon icon-nav-more'></div>\n    </div>\n  </div>\n  <ul class='options' style='border: none'>");
      if (this.data.deletable) {
        $o.push("    <li>\n      <button class='delete'>");
        $o.push("        " + $e($c(Strava.I18n.Locale.t('templates.discussions.topic.delete'))));
        $o.push("      </button>\n    </li>");
      } else {
        $o.push("    <li>\n      <button class='report'>");
        $o.push("        " + $e($c(Strava.I18n.Locale.t('templates.discussions.topic.report'))));
        $o.push("      </button>\n    </li>");
      }
      $o.push("  </ul>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/default_body'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='post-content'>");
      if (this.data.title) {
        $o.push("  <h4 class='post-title topless'>\n    <b>" + ($e($c(this.data.title))) + "</b>\n  </h4>");
      }
      $o.push("  <p class='h5 str-click-anchor-container-js topless'>");
      $o.push("    " + $c(this.data.text_formatted));
      $o.push("  </p>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/global_club_body'] = function(context) {
    return (function() {
      var $c, $e, $o, i, len, ref, shared_content;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='post-content'>\n  <div class='row'>\n    <div class='post-body spans11'>");
      if (this.data.title != null) {
        $o.push("      <h4 class='post-title topless'>");
        if (this.data.destination_url != null) {
          $o.push("        <a class='str-click-self-js' href='" + ($e($c(this.data.destination_url))) + "' title='" + ($e($c(this.data.title))) + "'>\n          <b>" + ($e($c(this.data.title))) + "</b>\n        </a>");
        } else {
          $o.push("        <b>" + ($e($c(this.data.title))) + "</b>");
        }
        $o.push("      </h4>");
      }
      if (this.data.text != null) {
        if (this.data.destination_url != null) {
          $o.push("      <a class='no-style str-click-self-js' href='" + ($e($c(this.data.destination_url))) + "'>\n        <div class='h5 topless'>" + ($c(this.data.text_formatted)) + "</div>\n      </a>");
        } else {
          $o.push("      <b>" + ($e($c(this.data.text_formatted))) + "</b>");
        }
      } else if (this.captionEscaped != null) {
        if (this.data.destination_url != null) {
          $o.push("      <a class='no-style str-click-self-js' href='" + ($e($c(this.data.destination_url))) + "'>\n        <div class='h5 topless'>" + ($c(this.captionEscaped)) + "</div>\n      </a>");
        } else {
          $o.push("      <b>" + ($e($c(this.captionEscaped))) + "</b>");
        }
      }
      ref = this.data.shared_contents;
      for (i = 0, len = ref.length; i < len; i++) {
        shared_content = ref[i];
        $o.push("      <a class='shared-content-container' target='_blank' href='" + ($e($c(shared_content.url))) + "'>\n        <div class='shared-content'>");
        if (shared_content.thumbnail_url) {
          $o.push("          <div class='shared-content-image'>");
          if (shared_content.type === 'video') {
            $o.push("            <img class='shared-content-video-icon' src='" + ($e($c(this.videoIconUrl))) + "'>");
          }
          $o.push("            <img class='shared-content-thumbnail' src='" + ($e($c(shared_content.thumbnail_url))) + "'>\n          </div>");
        }
        $o.push("          <div class='shared-content-text'>\n            <h5>" + ($c(shared_content.title)) + "</h5>\n            <p class='shared-content-description'>" + ($c(shared_content.description)) + "</p>\n            <p class='bottomless shared-content-domain topless'>" + ($c(shared_content.hostname)) + "</p>\n          </div>\n        </div>\n      </a>");
      }
      $o.push("    </div>\n    <div class='offset1 spans4'>");
      if (this.coverPhotoUrl != null) {
        $o.push("      <div class='post-cover-photo'>\n        <a class='no-style str-click-photo-js' href='" + ($e($c(this.data.destination_url))) + "'>\n          <img src='" + ($e($c(this.coverPhotoUrl))) + "'>\n        </a>\n      </div>");
      }
      $o.push("    </div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/post'] = function(context) {
    return (function() {
      var $c, $o;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='topic'>\n  <div class='post-container'>\n    <div class='post'>");
      $o.push("      " + $c(this.renderPartial('discussions/post/actions')));
      $o.push("      " + $c(this.renderPartial('discussions/post/header')));
      $o.push("      " + $c(this.renderPartial("discussions/post/" + this.bodyPartial)));
      if (this.socialButtons) {
        $o.push("      " + $c(this.renderPartial('discussions/post/social_buttons')));
      }
      $o.push("    </div>");
      $o.push("    " + $c(this.renderPartial('discussions/post/comments')));
      $o.push("  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/comments'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='post-content'>\n  <ol class='comments'>\n    <li class='see-all' style='display: none'>\n      <a href='javascript:;'>");
      $o.push("        " + $e($c(Strava.I18n.Locale.t('templates.discussions.topic.see_all_replies', {
        reply_count: this.data.num_comments
      }))));
      $o.push("      </a>\n    </li>\n  </ol>");
      if (currentAthlete.get('logged_in') && this.allowToComment) {
        $o.push("  <div class='media mt-md'>\n    <div class='media-object'>");
        $o.push("      " + $c(this.renderPartial('partials/current_athlete_avatar', {
          athlete: currentAthlete.toJSON(),
          size: 'default'
        })));
        $o.push("    </div>\n    <div class='media-content mentionable-comment-field' data-react-class='MentionableComment' data-react-props='" + ($e($c(JSON.stringify({
          'entity': 'Post',
          'entityId': "" + this.data.id,
          buttonClasses: 'create-reply',
          buttonText: Strava.I18n.Locale.t('templates.discussions.topic.add_reply'),
          placeHolder: Strava.I18n.Locale.t('templates.discussions.topic.add_reply'),
          suggestionLimit: 5,
          viewingAthleteId: currentAthlete.id
        })))) + "'></div>\n  </div>");
      }
      $o.push("</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  if (window.JST == null) {
    window.JST = {};
  }

  window.JST['discussions/post/social_buttons'] = function(context) {
    return (function() {
      var $c, $e, $o;
      $e = window.HAML.escape;
      $c = window.HAML.cleanValue;
      $o = [];
      $o.push("<div class='post-content'>\n  <div class='row'>\n    <div class='mt-md post-social-buttons'>");
      if (this.data.comments_disabled) {
        $o.push("      <button class='" + (['btn', 'btn-default', 'btn-kudos', 'btn-xs', 'str-click-kudos-js', "" + ($e($c(this.socialButtons.kudosBtnClass)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' title='" + ($e($c(this.socialButtons.kudosBtnTitle))) + "' disabled='" + ($e($c(this.socialButtons.disabled))) + "'>\n        <span class='" + (['app-icon', 'icon-kudo', 'icon-xs', "" + ($e($c(this.socialButtons.kudosIconClass)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "'></span>\n        <span class='count count-kudos' data-count='" + ($e($c(this.data.kudos_count))) + "'>" + ($e($c(new TwitterCldr.DecimalFormatter().format(this.data.kudos_count)))) + "</span>\n      </button>");
      } else {
        $o.push("      <div class='btn-group'>\n        <button class='" + (['btn', 'btn-default', 'btn-kudos', 'btn-xs', 'str-click-kudos-js', "" + ($e($c(this.socialButtons.kudosBtnClass)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "' title='" + ($e($c(this.socialButtons.kudosBtnTitle))) + "' disabled='" + ($e($c(this.socialButtons.disabled))) + "'>\n          <span class='" + (['app-icon', 'icon-kudo', 'icon-xs', "" + ($e($c(this.socialButtons.kudosIconClass)))].sort().join(' ').replace(/^\s+|\s+$/g, '')) + "'></span>\n          <span class='count count-kudos' data-count='" + ($e($c(this.data.kudos_count))) + "'>" + ($e($c(new TwitterCldr.DecimalFormatter().format(this.data.kudos_count)))) + "</span>\n        </button>\n        <button class='btn btn-comments btn-default btn-xs str-click-comment-list-js' title='" + ($e($c(this.socialButtons.commentBtnTitle))) + "' disabled='" + ($e($c(this.socialButtons.disabled))) + "'>\n          <span class='app-icon icon-comment icon-dark icon-xs'></span>\n          <span class='count count-comments' data-count='" + ($e($c(this.data.comments_count))) + "'>" + ($e($c(new TwitterCldr.DecimalFormatter().format(this.data.comments_count)))) + "</span>\n        </button>\n      </div>");
      }
      $o.push("    </div>\n  </div>\n</div>");
      return $o.join("\n").replace(/\s([\w-]+)='true'/mg, ' $1').replace(/\s([\w-]+)='false'/mg, '').replace(/\s(?:id|class)=(['"])(\1)/mg, "");
    }).call(window.HAML.context(context));
  };

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.PostView = (function(superClass) {
    extend(PostView, superClass);

    PostView.prototype.tagName = 'li';

    PostView.prototype.events = {
      'click .btn-kudos': 'handleAddKudo',
      'click .btn-comments': 'handleCommentClick'
    };

    function PostView(controller, model, options, kudosController, commentsController) {
      if (options == null) {
        options = {};
      }
      this.kudosController = kudosController != null ? kudosController : null;
      this.commentsController = commentsController != null ? commentsController : null;
      this.controller = controller;
      this.model = model;
      this.template = 'discussions/post/post';
      this.allowToComment = true;
      this.newDiscussionListEnabled = false;
      if (options.enableComments != null) {
        this.allowToComment = options.enableComments;
      }
      this.allowToComment = this.allowToComment && !model.get('comments_disabled');
      if (options.newDiscussionListEnabled != null) {
        this.newDiscussionListEnabled = options.newDiscussionListEnabled;
      }
      if (options.videoIconUrl != null) {
        this.videoIconUrl = options.videoIconUrl;
      }
      this.postId = this.model.get('id');
      this.controller.bind('postCommentAddChange', (function(_this) {
        return function(postId) {
          if (_this.model.id === postId) {
            if (_this.commentsController != null) {
              _this.commentsController.forceFetchComments('Post', _this.model.id);
            }
            _this.clearReply();
            return _this.renderNewComment();
          }
        };
      })(this));
      this.controller.bind('postCommentDeleteChange', (function(_this) {
        return function(postId, commentId) {
          if (_this.model.id === postId) {
            if (_this.commentsController != null) {
              _this.commentsController.removeCommentFromHash("Post-" + _this.model.id, commentId);
            }
            return _this.removeCommentView(commentId);
          }
        };
      })(this));
      if (this.kudosController != null) {
        this.kudosController.bind('kudoCreated', (function(_this) {
          return function(entity, id) {
            if (_this.model.id === id) {
              return _this.displayKudoed();
            }
          };
        })(this));
      }
      if (this.commentsController != null) {
        this.commentsController.bind('commentCreated', (function(_this) {
          return function(commentHash, entity) {
            var newComment, postId;
            postId = _this.getEntityId(entity);
            if (postId === _this.model.id) {
              newComment = new Strava.Discussions.Comment.fromCreatedCommentObject(commentHash);
              _this.model.comments.add(newComment);
              return _this.renderNewComment();
            }
          };
        })(this)).bind('commentDeleted', (function(_this) {
          return function(entity, comment) {
            var commentToRemove, postId;
            postId = _this.getEntityId(entity);
            if (postId === _this.model.id) {
              commentToRemove = _this.model.comments.find(function(postComment) {
                return postComment.id === comment.id;
              });
              _this.model.comments.remove(commentToRemove);
              return _this.removeCommentView(comment.id);
            }
          };
        })(this));
      }
      PostView.__super__.constructor.call(this);
    }

    PostView.prototype.render = function() {
      var avatarHtml, avatarView, data, e, node, str, truncatePostBody;
      truncatePostBody = this.newDiscussionListEnabled;
      data = this.getModelJSON(truncatePostBody);
      avatarView = new Strava.Discussions.AvatarView();
      if (this.model.get('announcement')) {
        data.display_name_url = "/clubs/" + (this.controller.parent.get('id'));
        data.display_name = this.controller.parent.get('name');
        avatarHtml = avatarView.clubAvatarHtml();
      } else {
        data.display_name_url = "/athletes/" + data.author.id;
        data.display_name = data.author.name;
        avatarHtml = avatarView.athleteAvatarHtml(data.author);
      }
      data.destination_url = this.getDestinationUrl();
      this.renderTemplate({
        bodyPartial: this.getPostBodyPartial(),
        data: data,
        allowToComment: this.allowToComment,
        newDiscussionListEnabled: this.newDiscussionListEnabled,
        coverPhotoUrl: this.model.getCoverPhotoUrl(),
        captionEscaped: this.model.getCaptionEscaped(),
        socialButtons: this.model.get('kudos_visible') ? this.socialButtonsConfiguration() : void 0,
        videoIconUrl: this.videoIconUrl != null ? this.videoIconUrl : void 0
      });
      this.$('.post-author').append(avatarHtml);
      this.$el.attr('data-post-id', this.model.get('id'));
      this.$el.attr('id', "post-" + (this.model.get('id')));
      this.prepareDelete();
      this.prepareReport();
      this.renderComments();
      this.prepareReply();
      if (this.model.get('trackable_id')) {
        this.$el.attr('str-trackable-id', this.model.get('trackable_id'));
        str = {
          'str-on': 'click',
          'str-trackable-id': this.model.get('trackable_id')
        };
        ['avatar', 'name', 'self', 'kudos', 'comment-list', 'photo', 'anchor-container'].forEach((function(_this) {
          return function(type) {
            var str_anchor_container;
            str['str-type'] = type.replace('-', '_');
            if (type === 'anchor-container') {
              str_anchor_container = _.extend({
                'click-type': 'link'
              }, str);
              return _this.$(".str-click-anchor-container-self-js").attr(str_anchor_container);
            } else {
              return _this.$(".str-click-" + type + "-js").attr(str);
            }
          };
        })(this));
      }
      node = this.$('.mentionable-comment-field');
      if (node.length) {
        e = new CustomEvent('JSCreatedReactNode', {
          detail: {
            node: node
          }
        });
        document.dispatchEvent(e);
      }
      return this;
    };

    PostView.prototype.prepareDelete = function() {
      if (!this.model.isDeletable()) {
        return;
      }
      this.$el.addClass('editable');
      return this.$('button.delete').click((function(_this) {
        return function() {
          if (!confirm(Strava.I18n.Locale.t('templates.discussions.post_view.confirm_delete_post'))) {
            return;
          }
          return _this.controller.deletePost(_this.model.get('id'));
        };
      })(this));
    };

    PostView.prototype.prepareReport = function() {
      return this.$('button.report').click((function(_this) {
        return function() {
          return window.location = _this.getReportUrl();
        };
      })(this));
    };

    PostView.prototype.socialButtonsConfiguration = function() {
      var commentBtnTitle, kudosBtnClass, kudosBtnTitle, kudosIconClass;
      kudosIconClass = this.model.get('has_kudoed') ? 'icon-color' : 'icon-dark';
      kudosBtnClass = currentAthlete.isLoggedIn() && !this.model.get('has_kudoed') && this.model.get('kudosable') ? 'add-kudo' : void 0;
      kudosBtnTitle = this.model.get('has_kudoed') || !this.model.get('kudosable') ? Strava.I18n.Locale.t('strava.discussions.post_view.view_all_kudos') : Strava.I18n.Locale.t('strava.discussions.post_view.give_kudos');
      commentBtnTitle = Strava.I18n.Locale.t('strava.discussions.post_view.comment');
      return {
        kudosIconClass: kudosIconClass,
        kudosBtnClass: kudosBtnClass,
        kudosBtnTitle: kudosBtnTitle,
        commentBtnTitle: commentBtnTitle,
        disabled: !currentAthlete.isLoggedIn()
      };
    };

    PostView.prototype.getModelJSON = function(truncate) {
      return this.model.toJSON(truncate);
    };

    PostView.prototype.renderComments = function() {
      var $commentsContainer, length;
      length = this.model.comments.size();
      $commentsContainer = this.$('.comments');
      this.model.comments.each((function(_this) {
        return function(comment, index) {
          var commentView;
          commentView = new Strava.Discussions.CommentView(_this.controller, comment, _this.model.id);
          return $commentsContainer.append(commentView.render().el);
        };
      })(this));
      if (length > 0 && length <= 2) {
        this.$('.comments li').show();
        return this.$('.see-all').hide();
      } else if (length > 2) {
        this.$('.comments li').slice(-2).show();
        return this.$('.see-all').show().click((function(_this) {
          return function() {
            if (_this.$('.count-comments').data('count') > 10 && currentAthlete.isLoggedIn()) {
              return _this.showPopoverBoxView('comments');
            } else {
              _this.$('.comments li').fadeIn(300);
              return _this.$('.see-all').hide();
            }
          };
        })(this));
      }
    };

    PostView.prototype.clearReply = function() {
      this.$('textarea').val('');
      return this.$('.comment-form').addClass('condensed').find('.create-reply').html(Strava.I18n.Locale.t('strava.discussions.post_view.add_reply')).hide();
    };

    PostView.prototype.renderNewComment = function() {
      var commentView, elem;
      this.updateCounterValue(this.$('.count-comments'), 1);
      commentView = new Strava.Discussions.CommentView(this.controller, this.model.comments.last(), this.model.id);
      elem = commentView.render().el;
      this.$('.comments').append(elem);
      return this.$(elem).fadeIn();
    };

    PostView.prototype.removeCommentView = function(commentId) {
      this.$("li[data-comment-id=" + commentId + "]").fadeOut(300, function() {
        return jQuery(this).remove();
      });
      return this.updateCounterValue(this.$('.count-comments'), -1);
    };

    PostView.prototype.updateSeeAllRepliesText = function() {
      var nbComments;
      nbComments = this.newDiscussionListEnabled ? this.$('.count-comments').data('count') : this.model.comments.size();
      return this.$("li.see-all a").text(Strava.I18n.Locale.t('templates.discussions.topic.see_all_replies', {
        reply_count: nbComments
      }));
    };

    PostView.prototype.prepareReply = function() {
      var replyButton, textBox;
      replyButton = this.$('.create-reply');
      textBox = this.$('textarea');
      textBox.bind('change keyup', (function(_this) {
        return function() {
          if (jQuery.trim(textBox.val()).length > 0) {
            return replyButton.removeAttr('disabled');
          } else {
            return replyButton.attr('disabled', 'true');
          }
        };
      })(this)).blur((function(_this) {
        return function() {
          if (jQuery.trim(textBox.val()).length === 0) {
            return _this.clearReply();
          }
        };
      })(this)).focus((function(_this) {
        return function() {
          _this.$('.comment-form').removeClass('condensed');
          return replyButton.show();
        };
      })(this));
      return replyButton.click((function(_this) {
        return function(e) {
          var text;
          text = jQuery.trim(textBox.val());
          if (text.length) {
            replyButton.attr('disabled', 'true').html(Strava.I18n.Locale.t('strava.discussions.post_view.submitting'));
            _this.controller.createComment(_this.model.id, text);
          }
          _this.clearReply();
          return e.preventDefault();
        };
      })(this));
    };

    PostView.prototype.getPostBodyPartial = function() {
      if (this.newDiscussionListEnabled) {
        return 'global_club_body';
      } else {
        return 'default_body';
      }
    };

    PostView.prototype.getEntityId = function(entity) {
      return parseInt(entity.split('-')[1]);
    };

    PostView.prototype.getDestinationUrl = function() {
      if (this.model.parent.attributes.is_private && !currentAthlete.isLoggedIn()) {
        return null;
      } else if (this.newDiscussionListEnabled) {
        return this.model.get('destination_url');
      }
    };

    PostView.prototype.getReportUrl = function() {
      return '/posts/' + this.postId + '/feedback';
    };

    PostView.prototype.handleAddKudo = function() {
      if (this.kudosController != null) {
        if (this.$('.btn-kudos').hasClass('add-kudo')) {
          return this.kudosController.kudo('Post', this.model.get('id'));
        } else {
          return this.showPopoverBoxView('kudos');
        }
      }
    };

    PostView.prototype.displayKudoed = function() {
      var kudos;
      this.$('.btn-kudos').removeClass('add-kudo').addClass('kudoed').attr('title', Strava.I18n.Locale.t('strava.discussions.post_view.view_all_kudos')).find('.icon-kudo').removeClass('icon-dark').addClass('icon-color');
      kudos = this.model.get('kudos_count') + 1;
      this.model.set('kudos_count', kudos);
      return this.updateCounterValue(this.$('.count-kudos'), 1);
    };

    PostView.prototype.updateCounterValue = function($counter, nb) {
      var count, newCount;
      count = $counter.data('count');
      newCount = count + nb;
      if (newCount < 0) {
        count = 0;
      }
      $counter.text(new TwitterCldr.DecimalFormatter().format(newCount));
      $counter.data('count', newCount);
      return this.updateSeeAllRepliesText();
    };

    PostView.prototype.showPopoverBoxView = function(tab) {
      var author, data;
      if (!currentAthlete.isLoggedIn()) {
        return;
      }
      data = {
        title: this.model.get('title'),
        kudo_count: this.$('.count-kudos').data('count'),
        comment_count: this.$('.count-comments').data('count')
      };
      author = this.model.get('announcement') ? this.model.parent : this.model.author;
      data['athlete_avatar'] = author.get('avatar');
      data['athlete_name'] = author.get('name');
      data['comments_disabled'] = this.model.get('comments_disabled');
      return Strava.Feed.PopoverBoxPostView.show('Post', this.model.get('id'), data, tab);
    };

    PostView.prototype.handleCommentClick = function() {
      return this.$el.find('.comment-form').find('textarea').focus();
    };

    return PostView;

  })(Backbone.View);

  Strava.Discussions.CommentView = (function(superClass) {
    extend(CommentView, superClass);

    CommentView.prototype.tagName = 'li';

    CommentView.prototype.attributes = {
      'style': 'display: none;'
    };

    function CommentView(controller, model, post_id) {
      this.model = model;
      this.controller = controller;
      this.post_id = post_id;
      this.template = 'discussions/comment';
      CommentView.__super__.constructor.call(this);
    }

    CommentView.prototype.render = function() {
      this.renderTemplate({
        data: this.getModelJSON()
      });
      this.$el.attr('data-comment-id', this.model.id);
      this.prepareDelete();
      return this;
    };

    CommentView.prototype.prepareDelete = function() {
      if (!this.model.isDeletable()) {
        return;
      }
      this.$el.addClass('editable');
      return this.$('button.delete').click((function(_this) {
        return function() {
          if (!confirm(Strava.I18n.Locale.t('templates.discussions.post_view.confirm_delete_reply'))) {
            return;
          }
          return _this.controller.deleteComment(_this.post_id, _this.model.get('id'));
        };
      })(this));
    };

    CommentView.prototype.prepareReport = function() {
      if (!this.model.isReportable()) {
        return;
      }
      return this.$('a.report').click((function(_this) {
        return function() {
          return _this.controller.reportComment(_this.post_id, _this.model.get('id'));
        };
      })(this));
    };

    CommentView.prototype.getModelJSON = function() {
      return this.model.toJSON();
    };

    return CommentView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module("Strava.Discussions");

  Strava.Discussions.SeeMoreController = (function(superClass) {
    extend(SeeMoreController, superClass);

    function SeeMoreController(pagingAdapter) {
      SeeMoreController.__super__.constructor.call(this, pagingAdapter);
      this.items_per_page = 5;
    }

    return SeeMoreController;

  })(Strava.Ui.PagingController);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Models');

  Strava.Models.Challenge = (function(superClass) {
    extend(Challenge, superClass);

    function Challenge() {
      return Challenge.__super__.constructor.apply(this, arguments);
    }

    Challenge.prototype.className = 'Challenge';

    Challenge.prototype.tabelized = 'challenges';

    Challenge.prototype.urlRoot = '/challenges/challenge';

    Challenge.prototype.fetch = function(options) {
      this.trigger('fetch');
      return Challenge.__super__.fetch.call(this, options);
    };

    Challenge.prototype.inChallenge = function() {
      return !!(this.get('in_challenge'));
    };

    Challenge.prototype.started = function() {
      return !!(this.get('started'));
    };

    Challenge.prototype.segmentBased = function() {
      return !!(this.get('segment_based'));
    };

    Challenge.prototype.isVelocityBased = function() {
      return !!(this.get('velocity'));
    };

    Challenge.prototype.isBestEffortBased = function() {
      return this.get('dimension') === 'distance_best_effort';
    };

    Challenge.prototype.isPaceBased = function() {
      return this.isVelocityBased() || this.isBestEffortBased();
    };

    Challenge.prototype.isVirtualRace = function() {
      return this.get('type') === 'VirtualRaceChallenge';
    };

    return Challenge;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Models');

  Strava.Models.Club = (function(superClass) {
    extend(Club, superClass);

    function Club() {
      return Club.__super__.constructor.apply(this, arguments);
    }

    Club.prototype.className = 'Club';

    Club.prototype.tabelized = 'clubs';

    Club.prototype.urlRoot = '/labs/clubs';

    Club.prototype.isRunningLeaderboard = function() {
      return this.get('leaderboard_type') === 'running';
    };

    Club.prototype.isCyclingLeaderboard = function() {
      return this.get('leaderboard_type') === 'cycling';
    };

    Club.prototype.isTriathlonLeaderboard = function() {
      return this.get('leaderboard_type') === 'triathlon';
    };

    Club.prototype.isWalkingLeaderboard = function() {
      return this.get('leaderboard_type') === 'walking';
    };

    Club.prototype.isDataDrivenLeaderboard = function() {
      return this.get('leaderboard_type') === 'data_driven';
    };

    Club.prototype.leaderboardDimensions = function() {
      return this.get('leaderboard_dimensions');
    };

    return Club;

  })(Backbone.Model);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Models');

  Strava.Models.GroupEvent = (function(superClass) {
    extend(GroupEvent, superClass);

    function GroupEvent() {
      return GroupEvent.__super__.constructor.apply(this, arguments);
    }

    GroupEvent.prototype.className = 'GroupEvent';

    GroupEvent.prototype.tabelized = 'group_events';

    GroupEvent.prototype.urlRoot = '/group_events';

    return GroupEvent;

  })(Backbone.Model);

}).call(this);
(function() {
  Strava.module('Strava.SharedContents');

  Strava.SharedContents.Util = (function() {
    function Util() {}

    Util.escapeText = function(text) {
      return _.template('{{text}}', {
        text: text
      });
    };

    Util.textFormatted = function(text, truncate, maxLength) {
      var formatter, textTemplate;
      if (truncate == null) {
        truncate = false;
      }
      if (maxLength == null) {
        maxLength = 230;
      }
      textTemplate = this.escapeText(text);
      formatter = Strava.Util.I18n.stringFormatter(textTemplate);
      if (truncate) {
        formatter.truncate(maxLength);
      }
      return formatter.nl2br().end();
    };

    Util.prepareSharedContents = function(sharedContents) {
      var i, len, results, sharedContent;
      if (sharedContents === null) {
        return [];
      }
      results = [];
      for (i = 0, len = sharedContents.length; i < len; i++) {
        sharedContent = sharedContents[i];
        results.push(this.preparedSharedContent(sharedContent));
      }
      return results;
    };

    Util.preparedSharedContent = function(sharedContents, detail) {
      var descriptionLength, hostname, ref, sharedContent, titleLength;
      if (detail == null) {
        detail = false;
      }
      sharedContent = jQuery.extend(true, {}, sharedContents);
      if (!sharedContent.title) {
        sharedContent.title = sharedContent.description;
        sharedContent.description = null;
      }
      ref = detail ? sharedContent.thumbnail_url ? [67, 173] : [75, 213] : sharedContent.thumbnail_url ? [45, 116] : [60, 145], titleLength = ref[0], descriptionLength = ref[1];
      hostname = this.parseHostname(sharedContent.url);
      return Object.assign(sharedContent, {
        title: this.textFormatted(sharedContent.title, true, titleLength),
        description: this.textFormatted(sharedContent.description, true, descriptionLength),
        hostname: hostname
      });
    };

    Util.parseHostname = function(url) {
      var hostname;
      if (!url) {
        return;
      }
      hostname = /^(f|ht)tps?:\/\//i.test(url) ? new URL(url).hostname : url.split('/')[0];
      return hostname.replace(/^www./, '').toUpperCase();
    };

    Util.urlRegEx = function() {
      return /(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,20}(:[0-9]{1,5})?(\/.*)?/;
    };

    Util.embedly = function(url, key, callback) {
      url = encodeURIComponent(url);
      return jQuery.ajax({
        url: "https://api.embed.ly/1/oembed?url=" + url + "&key=" + key,
        type: 'GET',
        success: (function(_this) {
          return function(response) {
            if (_this.verifyResponse(response)) {
              return callback(response);
            }
          };
        })(this)
      });
    };

    Util.verifyResponse = function(response) {
      return response.url && response.type !== 'photo' && response.type !== 'rich' && (response.title || response.summary);
    };

    return Util;

  })();

}).call(this);




















(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Ui');

  Strava.Ui.LightboxView = (function(superClass) {
    var defaultOptions;

    extend(LightboxView, superClass);

    LightboxView.prototype.tagName = 'div';

    LightboxView.prototype.className = 'lightbox';

    defaultOptions = {
      closeOnEscape: true,
      closeOnDocument: true
    };

    LightboxView.prototype.events = {
      'click .lightbox-window > .btn-close': 'closeBox',
      'click .close-lightbox': 'closeBox'
    };

    function LightboxView(className, options) {
      if (className == null) {
        className = '';
      }
      if (options == null) {
        options = defaultOptions;
      }
      this.closeDisabled = false;
      this.className += " " + className;
      this.createTemplate('#lightbox-template');
      if (options.closeOnDocument) {
        this.$document().click((function(_this) {
          return function(e) {
            if (_this.$el.is(':visible') && jQuery(e.target).hasClass('lightbox') && !_this.closeDisabled) {
              if (_this.$el[0] === e.target) {
                return _this.closeBox(e);
              }
            }
          };
        })(this));
      }
      if (options.closeOnEscape) {
        this.$document().keydown((function(_this) {
          return function(e) {
            if (e.keyCode === 27 && _this.$el.is(':visible') && !_this.closeDisabled) {
              return _this.closeBox(e);
            }
          };
        })(this));
      }
      LightboxView.__super__.constructor.call(this);
    }

    LightboxView.prototype.renderWithRenderer = function(renderer) {
      this.renderTemplate({});
      this.$el.hide();
      this.$$('html').addClass('fixed-lightbox').removeClass('exit-lightbox');
      this.$$('body').append(this.el);
      renderer.render();
      this.$('.lightbox-window').append(renderer.el);
      this.$el.hide().fadeIn(100);
      this.dispatchDOMEvent('lightbox:show');
      this.$('.btn-close').focus();
      return this;
    };

    LightboxView.prototype.render = function(content, target) {
      this.render_template({});
      this.$el.hide();
      this.$$('html').addClass('fixed-lightbox').removeClass('exit-lightbox');
      this.$$('body').append(this.el);
      this.$('.lightbox-window').append(content);
      this.$el.show();
      if (target) {
        this.handleTarget(target);
      }
      this.dispatchDOMEvent('lightbox:show');
      return this;
    };

    LightboxView.prototype.handleTarget = function(target) {
      var $target, offset;
      $target = this.$$(target);
      offset = {
        top: $target.offset().top
      };
      return this.$('.lightbox-window').offset(offset);
    };

    LightboxView.prototype.closeBox = function(event) {
      if (event) {
        event.preventDefault();
      }
      this.$$('html').removeClass('fixed-lightbox').addClass('exit-lightbox');
      setTimeout((function(_this) {
        return function() {
          return _this.$el.fadeOut(200);
        };
      })(this), 100);
      this.trigger('lightboxClosed');
      return this.dispatchDOMEvent('lightbox:hide');
    };

    LightboxView.prototype.enableCloseControls = function() {
      this.$('.btn-close').show();
      return this.closeDisabled = false;
    };

    LightboxView.prototype.disableCloseControls = function() {
      this.$('.btn-close').hide();
      return this.closeDisabled = true;
    };

    return LightboxView;

  })(Backbone.View);

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Ui');

  Strava.Ui.ImageRenderer = (function(superClass) {
    var instance, lightbox;

    extend(ImageRenderer, superClass);

    ImageRenderer.prototype.tagName = 'img';

    ImageRenderer.prototype.className = 'image-preview';

    function ImageRenderer(imageUrl1) {
      this.imageUrl = imageUrl1;
      ImageRenderer.__super__.constructor.call(this);
    }

    ImageRenderer.prototype.render = function() {
      this.$el.attr('src', this.imageUrl);
      return this;
    };

    instance = null;

    lightbox = null;

    ImageRenderer.getInstance = function(imageUrl) {
      if (!instance) {
        instance = new this(imageUrl);
      }
      return instance;
    };

    ImageRenderer.getLightboxInstance = function() {
      if (!lightbox) {
        lightbox = new Strava.Ui.LightboxView();
      }
      return lightbox;
    };

    ImageRenderer.createImageLightboxView = function(imageUrl) {
      return this.getLightboxInstance().renderWithRenderer(this.getInstance(imageUrl));
    };

    return ImageRenderer;

  })(Backbone.View);

}).call(this);
(function() {
  Strava.module('Strava.Tracking');

  Strava.Tracking.ImpressionTrackerSet = (function() {
    function ImpressionTrackerSet() {
      this.trackers = {};
    }

    ImpressionTrackerSet.prototype.addTracker = function(tracker, trackerGA) {
      if (this.trackers[tracker]) {
        return;
      }
      return this.trackers[tracker] = {
        tracker: tracker,
        ga: trackerGA
      };
    };

    ImpressionTrackerSet.prototype.pageEnter = function() {
      var data, key, ref, results;
      ref = this.trackers;
      results = [];
      for (key in ref) {
        data = ref[key];
        results.push(data.tracker.pageEnter());
      }
      return results;
    };

    ImpressionTrackerSet.prototype.pageExit = function() {
      var data, key, ref, results;
      ref = this.trackers;
      results = [];
      for (key in ref) {
        data = ref[key];
        results.push(data.tracker.pageExit());
      }
      return results;
    };

    ImpressionTrackerSet.prototype.hide = function() {
      var data, key, ref, results;
      ref = this.trackers;
      results = [];
      for (key in ref) {
        data = ref[key];
        results.push(data.tracker.hide());
      }
      return results;
    };

    ImpressionTrackerSet.prototype.show = function() {
      var data, key, ref, results;
      ref = this.trackers;
      results = [];
      for (key in ref) {
        data = ref[key];
        results.push(data.tracker.show());
      }
      return results;
    };

    ImpressionTrackerSet.prototype.count = function() {
      return Object.keys(this.trackers).length;
    };

    ImpressionTrackerSet.prototype.reset = function() {
      var data, key, ref;
      ref = this.trackers;
      for (key in ref) {
        data = ref[key];
        data.tracker.pageExit();
        data.ga.remove();
      }
      return this.trackers = {};
    };

    return ImpressionTrackerSet;

  })();

}).call(this);
(function() {
  Strava.module('Strava.Util');

  Strava.Util.Autotrack = (function() {
    var PAGE_VISIBILITY_TIMEOUT, instance;

    PAGE_VISIBILITY_TIMEOUT = 60 * 24;

    function Autotrack() {
      this.impressionTrackerSet = new Strava.Tracking.ImpressionTrackerSet();
      this.pageVisibilityTracker = null;
    }

    Autotrack.prototype.setPageVisibilityTracker = function(tracker) {
      this.pageVisibilityTracker = tracker;
      this.pageVisibilityTracker.on('pageEnter', (function(_this) {
        return function() {
          return _this.impressionTrackerSet.pageEnter();
        };
      })(this));
      return this.pageVisibilityTracker.on('pageExit', (function(_this) {
        return function() {
          return _this.impressionTrackerSet.pageExit();
        };
      })(this));
    };

    Autotrack.prototype.addImpressionTracker = function(tracker, impressionTrackerGA) {
      return this.impressionTrackerSet.addTracker(tracker, impressionTrackerGA);
    };

    Autotrack.prototype.setClioTracker = function(clioTracker) {
      return this.clioTracker = clioTracker;
    };

    Autotrack.prototype.getClioTracker = function() {
      return this.clioTracker;
    };

    Autotrack.prototype.handleUnload = function() {
      return this.impressionTrackerSet.pageExit();
    };

    Autotrack.prototype.handleImpressionReset = function() {
      return this.impressionTrackerSet.reset();
    };

    Autotrack.prototype.handleImpressionHide = function() {
      return this.impressionTrackerSet.hide();
    };

    Autotrack.prototype.handleImpressionShow = function() {
      return this.impressionTrackerSet.show();
    };

    Autotrack.prototype.handleImpressionAppend = function(entityIds) {
      return Strava.Feed.ImpressionTracker.configure(entityIds, this.clioTracker);
    };

    instance = null;

    Autotrack.getInstance = function() {
      if (!instance) {
        instance = new this();
      }
      return instance;
    };

    Autotrack.configureImpressionTracker = function(tracker) {
      var impressionTrackerGA;
      impressionTrackerGA = this.createPlugin('ImpressionTracker', tracker, {
        attributePrefix: 'str-',
        elements: tracker.entities()
      });
      return this.getInstance().addImpressionTracker(tracker, impressionTrackerGA);
    };

    Autotrack.configurePageVisibilityTracker = function(tracker) {
      this.createPlugin('PageVisibilityTracker', tracker, {
        changeTemplate: (function(oldValue, newValue) {
          return newValue;
        }),
        sessionTimeout: PAGE_VISIBILITY_TIMEOUT
      });
      return this.getInstance().setPageVisibilityTracker(tracker);
    };

    Autotrack.configureEventTracker = function(tracker) {
      return this.createPlugin('EventTracker', tracker, {
        attributePrefix: 'str-'
      });
    };

    Autotrack.createPlugin = function(plugin, tracker, options) {
      if (typeof gaplugins !== "undefined" && gaplugins !== null) {
        return new gaplugins[plugin](tracker, options);
      } else {
        console.log('gaplugins not found');
        return null;
      }
    };

    Autotrack.configurePage = function(formAuthenticityToken, currentAthleteId, callback) {
      var analyticsConfiguration, autotrack;
      analyticsConfiguration = {
        remote_logger: {
          request_headers: {
            'X-CSRF-Token': formAuthenticityToken
          }
        }
      };
      return autotrack = this.getInstance();
    };

    Autotrack.configureMore = function(callback) {
      var autotrack;
      autotrack = this.getInstance();
      return callback(autotrack.getClioTracker());
    };

    return Autotrack;

  })();

}).call(this);
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Strava.module('Strava.Feed');

  Strava.Feed.EventTracker = (function(superClass) {
    extend(EventTracker, superClass);

    function EventTracker() {
      return EventTracker.__super__.constructor.apply(this, arguments);
    }

    EventTracker.prototype.initialize = function(attributes, options) {
      return this.clioClient = options.clioClient;
    };

    EventTracker.prototype.send = function(hitType, data) {
      if (data.type === 'anchor_container') {
        return this.handleAnchorContainer(hitType, data);
      } else {
        return this.clioClient.trackClick(data.trackableId, data.type, data.targetUrl);
      }
    };

    EventTracker.prototype.handleAnchorContainer = function(hitType, data) {
      var clickType;
      if (data.targetTagName !== 'A') {
        return;
      }
      clickType = data.click_type ? data.click_type : 'link';
      return this.clioClient.trackClick(data.trackableId, clickType, data.targetUrl);
    };

    EventTracker.configure = function(clioClient) {
      var tracker;
      tracker = new this({}, {
        clioClient: clioClient
      });
      return Strava.Util.Autotrack.configureEventTracker(tracker);
    };

    return EventTracker;

  })(Backbone.Model);

}).call(this);


































